import React, { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { useEditor, EditorContent } from '@tiptap/react';
import { JSONContent } from '@tiptap/core';
import StarterKit from '@tiptap/starter-kit';
import Image from '@tiptap/extension-image';
import Link from '@tiptap/extension-link';
import Highlight from '@tiptap/extension-highlight';
import { convertToTipTapDocument } from '../utils/tiptapUtils';
import { JSONContent } from '@tiptap/core';
import { useArticles } from '../hooks/useArticles';
import { useCategories } from '../hooks/useCategories';
import { useAtolls } from '../hooks/useAtolls';
import { useUser } from '../hooks/useUser';
// Assuming correct import name  
import { useGovernment } from '../hooks/useGovernment';
import { MultiSelect } from '../components/MultiSelect';
import { IslandsSelect } from '../components/IslandsSelect';
import ImageBrowser from '../components/ImageBrowser';
import CategorySelector from '../components/CategorySelector';
import RelatedArticlesSelector from '../components/RelatedArticlesSelector';
import TagsInput from '../components/TagsInput';
import LanguageSelector from '../components/LanguageSelector';
import ArticlePreview from '../components/EnhancedArticlePreview';
import WordCounter from '../components/WordCounter';
import FormValidationIndicator from '../components/FormValidationIndicator';
import SaveAndContinue from '../components/SaveAndContinue';
import UnsavedChangesWarning from '../components/UnsavedChangesWarning';
import useAutoSave from '../hooks/useAutoSave';
import useFormChangeTracker from '../hooks/useFormChangeTracker';
import { supabase } from '../lib/supabase';
import { 
  Bold, 
  Italic, 
  List, 
  ListOrdered, 
  Quote, 
  Undo, 
  Redo, 
  Image as ImageIcon,
  Link as LinkIcon,
  Heading1,
  Heading2,
  Code,
  Highlighter,
  Save,
  Send,
  Languages,
  Loader2
} from 'lucide-react';

// Define types for nodes in the article JSON structure
interface MarkType {
  type: string;
  attrs?: Record<string, unknown>;
}

interface NodeType {
  type: string;
  content?: NodeType[];
  attrs?: Record<string, unknown>;
  text?: string;
  marks?: MarkType[];
}

interface TipTapDocument {
  type: string;
  content?: NodeType[];
}

// Utility function to convert JSONContent to TipTapDocument
const convertToTipTapDocument = (content: JSONContent | undefined): TipTapDocument => {
  if (!content) {
    return { type: 'doc', content: [] };
  }
  
  return {
    type: content.type || 'doc',
    content: content.content as NodeType[] || []
  };
};

const NewArticle: React.FC = () => {
  const navigate = useNavigate();
  const { createArticle } = useArticles();
  const { categories } = useCategories();
  const { atolls, error: atollsError, useFallbackData } = useAtolls(); // Base atolls for initial selection
  const { user, loading: userLoading } = useUser();
  const { government, error: governmentError, useFallbackData: useGovernmentFallbackData } = useGovernment();
  
  // Form state
  const [title, setTitle] = useState('');
  const [heading, setHeading] = useState('');
  const [socialHeading, setSocialHeading] = useState('');
  const [category, setCategory] = useState('');
  const [subcategory, setSubcategory] = useState<string | null>(null);
  const [selectedAtolls, setSelectedAtolls] = useState<number[]>([]);
  const [selectedIslands, setSelectedIslands] = useState<number[]>([]);
  const [selectedGovernmentIds, setSelectedGovernmentIds] = useState<string[]>([]);
  const [coverImage, setCoverImage] = useState('');
  const [imageCaption, setImageCaption] = useState('');
  const [language, setLanguage] = useState<'en'|'dv'>('dv');
  const [saving, setSaving] = useState(false);
  const [publishing, setPublishing] = useState(false);
  const [showImageBrowser, setShowImageBrowser] = useState(false);
  const [showPreview, setShowPreview] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  // Article flag states
  const [isBreaking, setIsBreaking] = useState(false);
  const [isFeatured, setIsFeatured] = useState(false);
  const [isDeveloping, setIsDeveloping] = useState(false);
  const [isExclusive, setIsExclusive] = useState(false);
  const [isSponsored, setIsSponsored] = useState(false);
  const [sponsoredBy, setSponsoredBy] = useState('');
  const [sponsoredUrl, setSponsoredUrl] = useState('');
  
  // New article fields
  const [newsType, setNewsType] = useState<string>('update');
  const [newsPriority, setNewsPriority] = useState<number>(3);
  const [newsSource, setNewsSource] = useState<string>('');
  const [metaTitle, setMetaTitle] = useState<string>('');
  const [metaDescription, setMetaDescription] = useState<string>('');
  const [metaKeywords, setMetaKeywords] = useState<string[]>([]);
  const [relatedArticles, setRelatedArticles] = useState<string[]>([]);
  const [tags, setTags] = useState<string[]>([]);
  const [authorNotes, setAuthorNotes] = useState<string>('');
  const [originalSourceUrl, setOriginalSourceUrl] = useState<string>('');
  const [translationSourceUrl, setTranslationSourceUrl] = useState<string>('');
  const [translationSourceLang, setTranslationSourceLang] = useState<string>('');
  const [translationNotes, setTranslationNotes] = useState<string>('');
  const [showAdvancedOptions, setShowAdvancedOptions] = useState(false);
  
  // Form validation state
  const [formValidated, setFormValidated] = useState(false);
  const [validationFields, setValidationFields] = useState<Array<{name: string, valid: boolean, errorMessage?: string}>>([]);
  const [formTouched, setFormTouched] = useState(false);
  const [lastSaved, setLastSaved] = useState<Date | null>(null);
  // Auto-save configuration
  const [autoSaveEnabled, setAutoSaveEnabled] = useState(true);
  const [autoSaveInterval, setAutoSaveInterval] = useState(60000); // 1 minute default  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  // Reference to track initial render to avoid marking content as unsaved on first load
  const isInitialRender = useRef(true);// Initialize the editor
  const editor = useEditor({
    extensions: [
      StarterKit,
      Image,
      Link.configure({
        openOnClick: false,
      }),
      Highlight,
    ],
    content: '',
    editorProps: {
      attributes: {
        class: `prose prose-lg max-w-none focus:outline-none min-h-[300px] ${language === 'dv' ? 'thaana-waheed' : ''}`,
      },
    },
    onUpdate: () => {
      // Mark as having unsaved changes when editor content is modified
      if (!isInitialRender.current) {
        setHasUnsavedChanges(true);
      }
    }
  });

  // Track form field changes for unsaved changes detection
  useFormChangeTracker(
    {
      title, heading, socialHeading, category, subcategory,
      selectedAtolls, selectedIslands, selectedGovernmentIds, 
      coverImage, imageCaption, isBreaking, isFeatured, isDeveloping, 
      isExclusive, isSponsored, sponsoredBy, sponsoredUrl,
      newsType, newsPriority, newsSource, metaTitle, metaDescription,
      metaKeywords, relatedArticles, tags, authorNotes,
      originalSourceUrl, translationSourceUrl, translationSourceLang, translationNotes
    },
    {
      onChange: () => setHasUnsavedChanges(true),
      resetOnInit: true,
      enabled: true
    }
  );
  // Create a data object for the auto-save hook to track
  const articleData = {
    title,
    heading,
    socialHeading,
    content: editor ? convertToTipTapDocument(editor.getJSON()) : undefined,
    category,
    subcategory,
    selectedAtolls,
    selectedIslands,
    selectedGovernmentIds,
    coverImage,
    imageCaption,
    isBreaking,
    isFeatured,
    isDeveloping,
    isExclusive,
    isSponsored,
    sponsoredBy,
    sponsoredUrl,
    newsType,
    newsPriority,
    newsSource,
    metaTitle,
    metaDescription,
    metaKeywords,
    relatedArticles,
    tags,
    authorNotes,
    originalSourceUrl,
    translationSourceUrl,
    translationSourceLang,
    translationNotes
  };  // Track form changes for unsaved changes detection
  useEffect(() => {
    // Skip the initial render using the component-wide isInitialRender ref
    if (isInitialRender.current) {
      isInitialRender.current = false;
      return;
    }
    
    // Mark as having unsaved changes when content is modified
    setHasUnsavedChanges(true);
  }, [
    title, heading, socialHeading, category, subcategory,
    // Extract complex expressions to avoid ESLint warnings
    selectedAtolls?.toString(),
    selectedIslands?.toString(),
    selectedGovernmentIds?.toString(),
    coverImage, imageCaption,
    isBreaking, isFeatured, isDeveloping, isExclusive, isSponsored,
    editor?.getHTML()
  ]);
  // Effect to track changes for unsaved changes detection
  useEffect(() => {
    if (isInitialRender.current) {
      isInitialRender.current = false;
      return;
    }
    // Mark as having unsaved changes when form fields are modified
    setHasUnsavedChanges(true);
  }, [
    title, heading, socialHeading, category, subcategory,
    // Use stable string representations for arrays
    selectedAtolls?.toString(), 
    selectedIslands?.toString(), 
    selectedGovernmentIds?.toString(),
    coverImage, imageCaption, isBreaking, isFeatured, isDeveloping, 
    isExclusive, isSponsored, sponsoredBy, sponsoredUrl,
    newsType, newsPriority, newsSource
  ]);

  // Effect to track editor content changes
  useEffect(() => {
    if (!editor || isInitialRender.current) return;
    
    // Listen for editor content changes
    const handleUpdate = () => {
      setHasUnsavedChanges(true);
    };
    
    editor.on('update', handleUpdate);
    
    return () => {
      editor.off('update', handleUpdate);
    };
  }, [editor]);
  // Add an effect to track editor changes
  useEffect(() => {
    if (!editor) return;
    
    const handleUpdate = () => {
      setHasUnsavedChanges(true);
    };
    
    editor.on('update', handleUpdate);
    
    return () => {
      editor.off('update', handleUpdate);
    };
  }, [editor]);
  
  // Auto-save functionality
  useAutoSave({
    data: articleData,
    onSave: async () => {
      // Only auto-save if we have enough content to make it worthwhile
      if (editor && (editor.getText().length > 50 || title.length > 10)) {
        try {
          await handleSaveDraft(true);
          // Reset unsaved changes flag after successful auto-save
          setHasUnsavedChanges(false);
        } catch (error) {
          console.error('Auto-save failed:', error);
          // Keep the unsaved changes flag true if save failed
        }
      }
    },
    interval: autoSaveInterval,
    enabled: autoSaveEnabled && !!user,
    minChanges: 3 // Require at least 3 changes before triggering an auto-save
  });

  useEffect(() => {
    const checkAuth = async () => {
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) {
        navigate('/login', { replace: true });
      }
    };
    
    checkAuth();
  }, [navigate]);

  useEffect(() => {
    if (!userLoading && !user) {
      navigate('/login', { replace: true });
    }
  }, [user, userLoading, navigate]);
  // Clear island selections when atoll selection changes
  useEffect(() => {
    setSelectedIslands([]);
  }, [selectedAtolls]);

  const validateForm = () => {
    const validationResults = [];
    let isValid = true;
    
    // Check user login
    if (!user) {
      validationResults.push({
        name: language === 'dv' ? 'އެކައުންޓް' : 'Login',
        valid: false,
        errorMessage: language === 'dv' ? 'އެކައުންޓަށް ވަދެވަޑައިގަންނަވާ' : 'Please log in to continue'
      });
      isValid = false;
    }
    
    // Required fields validation
    // Title validation
    validationResults.push({
      name: language === 'dv' ? 'ސުރުޚީ (ލެޓިން)' : 'Title (Latin)',
      valid: !!title.trim(),
      errorMessage: language === 'dv' ? 'ސުރުޚީ ލިޔުއްވާ' : 'Please enter a title'
    });
    
    // Heading validation
    validationResults.push({
      name: language === 'dv' ? 'ސުރުޚީ (ދިވެހި)' : 'Heading (Thaana)',
      valid: !!heading.trim(),
      errorMessage: language === 'dv' ? 'ދިވެހި ސުރުޚީ ލިޔުއްވާ' : 'Please enter a heading'
    });
    
    // Atoll validation
    validationResults.push({
      name: language === 'dv' ? 'އަތޮޅުތައް' : 'Atolls',
      valid: selectedAtolls && selectedAtolls.length > 0,
      errorMessage: language === 'dv' ? 'އަތޮޅެއް އިޚްތިޔާރު ކުރައްވާ' : 'Please select at least one atoll'
    });
    
    // Category validation
    validationResults.push({
      name: language === 'dv' ? 'ބައި' : 'Category',
      valid: !!category,
      errorMessage: language === 'dv' ? 'ބައެއް އިޚްތިޔާރު ކުރައްވާ' : 'Please select a category'
    });
    
    // Cover image validation
    validationResults.push({
      name: language === 'dv' ? 'މައި ފޮޓޯ' : 'Cover Image',
      valid: !!coverImage,
      errorMessage: language === 'dv' ? 'ފޮޓޯއެއް އިންތިޚާބުކުރައްވާ' : 'Please select a cover image'
    });
    
    // Content validation
    validationResults.push({
      name: language === 'dv' ? 'މަޢުލޫމާތު' : 'Content',
      valid: editor ? editor.getText().trim().length > 0 : false,
      errorMessage: language === 'dv' ? 'މަޢުލޫމާތު ލިޔުއްވާ' : 'Please enter some content'
    });
    
    // Sponsored content validation
    if (isSponsored) {
      validationResults.push({
        name: language === 'dv' ? 'ސްޕޮންސަރ ކުރި ފަރާތް' : 'Sponsor Name',
        valid: !!sponsoredBy,
        errorMessage: language === 'dv' ? 'ސްޕޮންސަރ ކުރި ފަރާތް ލިޔުއްވާ' : 'Please enter sponsor name'
      });
      
      validationResults.push({
        name: language === 'dv' ? 'ސްޕޮންސަރ ލިންކް' : 'Sponsor URL',
        valid: !!sponsoredUrl && isValidUrl(sponsoredUrl),
        errorMessage: language === 'dv' ? 'ޞައްޙަ ސްޕޮންސަރ ލިންކެއް ލިޔުއްވާ' : 'Please enter a valid sponsor URL'
      });
    }
    
    // URL validation for any fields containing URLs
    const urlFields = [
      { value: originalSourceUrl, name: language === 'dv' ? 'އަސްލު މަސްދަރު ޔޫއާރްއެލް' : 'Original Source URL' },
      { value: translationSourceUrl, name: language === 'dv' ? 'ތަރުޖަމާ މަސްދަރު ޔޫއާރްއެލް' : 'Translation Source URL' }
    ];
    
    for (const field of urlFields) {
      if (field.value) {
        validationResults.push({
          name: field.name,
          valid: isValidUrl(field.value),
          errorMessage: language === 'dv' 
            ? `${field.name} ގައި ޞައްޙަ ޔޫއާރްއެލްއެއް ލިޔުއްވާ` 
            : `Please enter a valid URL for ${field.name}`
        });
      }
    }
    
    // Update validation state
    setValidationFields(validationResults);
    setFormValidated(validationResults.every(field => field.valid));
    
    // Check if the form is valid overall
    isValid = validationResults.every(field => field.valid);
    
    if (!isValid && formTouched) {
      // Scroll to the top of the form to show validation messages
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }
    
    return isValid;
  };
    // Helper function to validate URLs
  const isValidUrl = (urlString: string): boolean => {
    try {
      if (urlString === '') return true; // Empty URLs are considered valid (optional fields)
      new URL(urlString);
      return true;
    } catch {
      return false;
    }
  };  // Add a flag parameter to indicate if we should navigate after saving
  const handleSaveDraft = async (stayOnPage: boolean = false) => {
    if (!editor) return;
    
    // Mark the form as touched to show validation messages
    setFormTouched(true);
    
    if (!validateForm()) return;
    
    try {
      setSaving(true);
      setError(null);
      
      if (!user) {
        navigate('/login', { replace: true });
        return;
      }await createArticle({
        title,
        heading,
        social_heading: socialHeading,
        content: convertToTipTapDocument(editor.getJSON()),
        category_id: parseInt(category),
        subcategory_id: subcategory ? parseInt(subcategory) : null,
        atoll_ids: selectedAtolls || [],
        island_ids: selectedIslands || [],
        government_ids: selectedGovernmentIds || [],
        cover_image: coverImage,
        image_caption: imageCaption,
        status: 'draft',
        publish_date: null, // No publish date for drafts
        user_id: user.id,
        // Include the article flag fields
        is_breaking: isBreaking,
        is_featured: isFeatured,
        is_developing: isDeveloping,
        is_exclusive: isExclusive,
        is_sponsored: isSponsored,
        sponsored_by: isSponsored ? sponsoredBy : null,
        sponsored_url: isSponsored ? sponsoredUrl : null,
        // New article fields
        news_type: newsType,
        news_priority: newsPriority,
        news_source: newsSource,
        meta_title: metaTitle,
        meta_description: metaDescription,
        meta_keywords: metaKeywords,
        related_articles: relatedArticles,
        tags,
        author_notes: authorNotes,
        original_source_url: originalSourceUrl,
        translation_source_url: translationSourceUrl,
        translation_source_lang: translationSourceLang,
        translation_notes: translationNotes
      });      // Update last saved time and reset unsaved changes flag
      setLastSaved(new Date());
      setHasUnsavedChanges(false);
      
      // Only navigate away if stayOnPage is false
      if (!stayOnPage) {
        navigate('/articles');
      }
    } catch (error) {
      console.error('Failed to save draft:', error);
      setError(language === 'dv' ? 'ޑްރާފްޓް ކުރުމުގައި މަްސަލައެއް ދިމާވެއްޖެ' : 'Failed to save draft. Please try again.');
    } finally {
      setSaving(false);
    }
  };
  const handlePublish = async () => {
    if (!editor) return;
    
    // Mark the form as touched to show validation messages
    setFormTouched(true);
    
    if (!validateForm()) return;
    
    try {
      setPublishing(true);
      setError(null);
      
      if (!user) {
        navigate('/login', { replace: true });
        return;
      }await createArticle({
        title,
        heading,
        social_heading: socialHeading,
        content: convertToTipTapDocument(editor.getJSON()),
        category_id: parseInt(category),
        subcategory_id: subcategory ? parseInt(subcategory) : null,
        atoll_ids: selectedAtolls || [],
        island_ids: selectedIslands || [],
        government_ids: selectedGovernmentIds || [],
        cover_image: coverImage,
        image_caption: imageCaption,
        status: 'published',
        publish_date: new Date().toISOString(),
        user_id: user.id,
        // Include the article flag fields
        is_breaking: isBreaking,
        is_featured: isFeatured,
        is_developing: isDeveloping,
        is_exclusive: isExclusive,
        is_sponsored: isSponsored,
        sponsored_by: isSponsored ? sponsoredBy : null,
        sponsored_url: isSponsored ? sponsoredUrl : null,
        // New article fields
        news_type: newsType,
        news_priority: newsPriority,
        news_source: newsSource,
        meta_title: metaTitle,
        meta_description: metaDescription,
        meta_keywords: metaKeywords,
        related_articles: relatedArticles,
        tags,
        author_notes: authorNotes,
        original_source_url: originalSourceUrl,
        translation_source_url: translationSourceUrl,
        translation_source_lang: translationSourceLang,
        translation_notes: translationNotes      });
      
      // Reset unsaved changes flag before navigating
      setHasUnsavedChanges(false);
      navigate('/articles');
    } catch (error) {
      console.error('Failed to publish:', error);
      setError(language === 'dv' ? 'ޝާއިޢު ކުރުމުގައި މަްސަލައެއް ދިމާވެއްޖެ' : 'Failed to publish. Please try again.');
    } finally {
      setPublishing(false);
    }
  };

  const addImage = () => {
    setShowImageBrowser(true);
  };

  const handleImageSelect = (url: string) => {
    setCoverImage(url);
    setShowImageBrowser(false);
  };

  const addLink = () => {
    const url = window.prompt('Enter URL');
    if (url && editor) {
      editor.chain().focus().setLink({ href: url }).run();
    }
  };

  const toggleLanguage = () => {
    setLanguage(prev => prev === 'dv' ? 'en' : 'dv');
    if (editor) {
      editor.setEditable(false);
      editor.setEditable(true);
    }
  };

  // Utility function to convert JSONContent to TipTapDocument
  const convertToTipTapDocument = (content: JSONContent | undefined) => {
    if (!content) return { type: 'doc', content: [] };
    
    // Ensure the structure matches TipTapDocument
    return {
      type: content.type || 'doc',
      content: content.content as any[] || []
    };
  };

  if (userLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Loader2 className="w-8 h-8 animate-spin text-blue-600" />
      </div>
    );
  }

  if (!user) {
    return null;
  }

  return (
    <div className="max-w-5xl mx-auto">
      <div className="mb-6 flex justify-between items-center">
        <div>
          <h1 className={`text-2xl font-bold text-gray-900 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
            {language === 'dv' ? 'އައު ލިޔުމެއް' : 'Create New Article'}
          </h1>
          <p className={`text-gray-600 mt-1 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
            {language === 'dv' ? 'ައުލިޔުމެއް ލިޔެ ޝާއިޢު ކުރައްވާ' : 'Write and publish your next story'}
          </p>
        </div>
        <button
          onClick={toggleLanguage}
          className="flex items-center gap-2 px-4 py-2 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
          dir={language === 'dv' ? 'rtl' : 'ltr'}
        >
          <Languages size={20} className={language === 'dv' ? 'ml-2' : 'mr-2'} />
          <span className={`text-sm font-medium ${language === 'dv' ? 'thaana-waheed' : ''}`}>
            {language === 'dv' ? 'Switch to English' : 'ދިވެހި އަށް ބަދަލުކުރައްވާ'}
          </span>
        </button>
      </div>      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        {error && (
          <div className="mb-4 p-3 bg-red-50 text-red-700 border border-red-200 rounded-lg">
            {error}
          </div>
        )}
        
        {/* Form validation indicator - only show after user has interacted with the form */}
        {formTouched && (
          <div className="mb-4">
            <FormValidationIndicator fields={validationFields} language={language} />
          </div>
        )}
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
          <div>
            <label className={`block text-sm font-medium text-gray-700 mb-1 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
              {language === 'dv' ? 'ސުރުޚީ (ލެޓިން)' : 'Title (Latin)'
}
            </label>
            <input
              type="text"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              className={`w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 ${language === 'dv' ? 'placeholder:thaana-waheed' : ''}`}
              placeholder={language === 'dv' ? 'ލެޓިން އަކުރުން ސުރުޚީ ލިޔުއްވާ' : 'Enter title in Latin'}
              dir={language === 'dv' ? 'rtl' : 'ltr'}
            />
          </div>

          <div>
            <label className={`block text-sm font-medium text-gray-700 mb-1 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
              {language === 'dv' ? 'ސުރުޚީ (ދިވެހި)' : 'Heading (Thaana)'}
            </label>
            <input
              type="text"
              value={heading}
              onChange={(e) => setHeading(e.target.value)}
              className={`w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 ${language === 'dv' ? 'thaana-waheed placeholder:thaana-waheed' : ''}`}
              placeholder={language === 'dv' ? 'ދިވެހިން ސުރުޚީ ލިޔުއްވާ' : 'Enter heading in Thaana'}
              dir={language === 'dv' ? 'rtl' : 'ltr'}
            />
          </div>

          <div>
            <label className={`block text-sm font-medium text-gray-700 mb-1 ${language === 'dv' ? 'thaana-waheed' : ''}`}></label>
              {language === 'dv' ? 'ސޯޝަލް މީޑިއާ ސުރުޚީ' : 'Social Heading'}
            </label>
            <input
              type="text"
              value={socialHeading}
              onChange={(e) => setSocialHeading(e.target.value)}
              className={`w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 ${language === 'dv' ? 'thaana-waheed placeholder:thaana-waheed' : ''}`}
              placeholder={language === 'dv' ? 'ސޯޝަލް މީޑިއާ ސުރުޚީ ލިޔުއްވާ' : 'Enter social media heading'}
              dir={language === 'dv' ? 'rtl' : 'ltr'}
            />
          </div>

          <div>
            <CategorySelector
              categories={categories || []}
              selectedCategoryId={category}
              selectedSubcategoryId={subcategory}
              onCategoryChange={setCategory}
              onSubcategoryChange={setSubcategory}
              language={language}
            />
          </div>

          <div className="md:col-span-2">
            <div className="flex justify-between items-center mb-1">
              <label className={`block text-sm font-medium text-gray-700 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
                {language === 'dv' ? 'އަތޮޅުތައް' : 'Atolls'}
              </label>
              {useFallbackData && (
                <div className="text-xs px-2 py-1 bg-amber-50 text-amber-700 rounded-md border border-amber-200">
                  {language === 'dv' 
                    ? 'ވަގުތީ މަޢުލޫމާތު ބޭނުންކުރެވެނީ' 
                    : 'Using backup data - some features may be limited'}
                </div>
              )}
              {atollsError && (
                <div className="text-xs px-2 py-1 bg-red-50 text-red-700 rounded-md border border-red-200">
                  {language === 'dv' 
                    ? 'ޑޭޓާބޭސް އެރަރ' 
                    : `DB Error: ${atollsError}`}
                </div>
              )}
            </div>
            <MultiSelect
              options={atolls || []}
              value={selectedAtolls || []}
              onChange={(values) => {
                console.log('Selected atolls changed:', values);
                setSelectedAtolls((values || []).filter(id => typeof id === 'number') as number[]);
                setSelectedIslands([]); // Clear island selection when atolls change
              }}
              language={language}
              placeholder={language === 'dv' ? 'އަތޮޅުތައް އިޚްތިޔާރު ކުރައްވާ' : 'Select atolls'}
            />
          </div>

          {selectedAtolls && selectedAtolls.length > 0 && (
            <div className="md:col-span-2">
              <label className={`block text-sm font-medium text-gray-700 mb-1 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
                {language === 'dv' ? 'ރަށްތައް' : 'Islands'}
              </label>
              <IslandsSelect
                atollIds={selectedAtolls}
                value={selectedIslands || []}
                onChange={(values) => {
                  console.log('Selected islands changed:', values);
                  setSelectedIslands((values || []).filter(id => typeof id === 'number') as number[]);
                }}
                language={language}
              />
            </div>
          )}

          <div className="md:col-span-2">
            <div className="flex justify-between items-center mb-1">
              <label className={`block text-sm font-medium text-gray-700 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
                {language === 'dv' ? 'މިނިސްޓްރީތައް' : 'Government Ministries'}
              </label>
              {useGovernmentFallbackData && (
                <div className="text-xs px-2 py-1 bg-amber-50 text-amber-700 rounded-md border border-amber-200">
                  {language === 'dv' 
                    ? 'ވަގުތީ މަޢުލޫމާތު ބޭނުންކުރެވެނީ' 
                    : 'Using backup data - some features may be limited'}
                </div>
              )}
              {governmentError && (
                <div className="text-xs px-2 py-1 bg-red-50 text-red-700 rounded-md border border-red-200">
                  {language === 'dv' 
                    ? 'ޑޭޓާބޭސް އެރަރ' 
                    : `DB Error: ${governmentError}`}
                </div>
              )}
            </div>
            <MultiSelect              options={government.map((item: { id: string; name: string; name_en: string }) => ({
                id: item.id, // Use original UUID string
                name: item.name,
                name_en: item.name_en
              }))}
              value={selectedGovernmentIds}
              onChange={(values) => {
                console.log('Selected ministries changed:', values);
                setSelectedGovernmentIds((values || []).filter(id => typeof id === 'string') as string[]);
              }}
              language={language}
              placeholder={language === 'dv' ? 'މިނިސްޓްރީތައް އިޚްތިޔާރު ކުރައްވާ' : 'Select ministries'}
            />
          </div>

          <div>
            <label className={`block text-sm font-medium text-gray-700 mb-1 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
              {language === 'dv' ? 'މައި ފޮޓޯ' : 'Cover Image'}
            </label>
            <div className="flex gap-2">
              <button
                onClick={() => setShowImageBrowser(true)}
                className="px-3 py-1 bg-blue-600 text-white rounded-l hover:bg-blue-700"
                aria-label={language === 'dv' ? 'ފޮޓޯއެއް އިންތިޚާބުކުރައްވާ' : 'Select image'}
                title={language === 'dv' ? 'ފޮޓޯއެއް އިންތިޚާބުކުރައްވާ' : 'Select image'}
              >
                <ImageIcon size={20} />
              </button>
              <input
                type="text"
                value={coverImage}
                readOnly
                className="flex-1 rounded-r-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 bg-gray-50 cursor-not-allowed"
                placeholder="Select an image..."
              />
            </div>
            <input
              type="text"
              value={imageCaption}
              onChange={(e) => setImageCaption(e.target.value)}
              className={`mt-2 w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 ${language === 'dv' ? 'thaana-waheed placeholder:thaana-waheed' : ''}`}
              placeholder={language === 'dv' ? 'ފޮޓޯގެ ތަފްޞީލް' : 'Image caption'}
              dir={language === 'dv' ? 'rtl' : 'ltr'}
            />
          </div>
        </div>

        {coverImage && (
          <div className="mb-6 relative h-[200px] rounded-lg overflow-hidden">
            <img
              src={coverImage}
              alt={imageCaption}
              className="w-full h-full object-cover"
            />
          </div>
        )}
        
        {/* Article Flags Section */}
        <div className="mb-6 bg-gray-50 p-4 rounded-lg border border-gray-200">
          <h3 className={`text-lg font-medium mb-3 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
            {language === 'dv' ? 'އާޓިކަލް އޮޕްޝަންސް' : 'Article Options'}
          </h3>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <label className="flex items-center space-x-2 cursor-pointer">
              <input 
                type="checkbox" 
                checked={isBreaking} 
                onChange={(e) => setIsBreaking(e.target.checked)}
                className="w-4 h-4 text-blue-600 rounded focus:ring-blue-500" 
              />
              <span className={`${language === 'dv' ? 'thaana-waheed mr-2' : 'ml-2'}`}>
                {language === 'dv' ? 'ބްރޭކިންގ ނިއުސް' : 'Breaking News'}
              </span>
            </label>
            
            <label className="flex items-center space-x-2 cursor-pointer">
              <input 
                type="checkbox" 
                checked={isFeatured} 
                onChange={(e) => setIsFeatured(e.target.checked)}
                className="w-4 h-4 text-blue-600 rounded focus:ring-blue-500" 
              />
              <span className={`${language === 'dv' ? 'thaana-waheed mr-2' : 'ml-2'}`}>
                {language === 'dv' ? 'ފީޗަރކުރޭ' : 'Featured'}
              </span>
            </label>
            
            <label className="flex items-center space-x-2 cursor-pointer">
              <input 
                type="checkbox" 
                checked={isDeveloping} 
                onChange={(e) => setIsDeveloping(e.target.checked)}
                className="w-4 h-4 text-blue-600 rounded focus:ring-blue-500" 
              />
              <span className={`${language === 'dv' ? 'thaana-waheed mr-2' : 'ml-2'}`}>
                {language === 'dv' ? 'ޑިވެލޮޕިންގް ސްޓޯރީ' : 'Developing Story'}
              </span>
            </label>
            
            <label className="flex items-center space-x-2 cursor-pointer">
              <input 
                type="checkbox" 
                checked={isExclusive} 
                onChange={(e) => setIsExclusive(e.target.checked)}
                className="w-4 h-4 text-blue-600 rounded focus:ring-blue-500" 
              />
              <span className={`${language === 'dv' ? 'thaana-waheed mr-2' : 'ml-2'}`}>
                {language === 'dv' ? 'އެކްސްކްލޫސިވް' : 'Exclusive'}
              </span>
            </label>
            
            <label className="flex items-center space-x-2 cursor-pointer">
              <input 
                type="checkbox" 
                checked={isSponsored} 
                onChange={(e) => setIsSponsored(e.target.checked)}
                className="w-4 h-4 text-blue-600 rounded focus:ring-blue-500" 
              />
              <span className={`${language === 'dv' ? 'thaana-waheed mr-2' : 'ml-2'}`}>
                {language === 'dv' ? 'ސްޕޮންސަރޑް' : 'Sponsored'}
              </span>
            </label>
          </div>
          
          {/* Sponsored content fields - only show if sponsored is checked */}
          {isSponsored && (
            <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className={`block text-sm font-medium text-gray-700 mb-1 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
                  {language === 'dv' ? 'ސްޕޮންސަރ ކުރި ފަރާތް' : 'Sponsored By'}
                </label>
                <input
                  type="text"
                  value={sponsoredBy}
                  onChange={(e) => setSponsoredBy(e.target.value)}
                  className="w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                  placeholder={language === 'dv' ? 'ސްޕޮންސަރ ކުރި ފަރާތް' : 'Sponsor name'}
                  dir={language === 'dv' ? 'rtl' : 'ltr'}
                />
              </div>
              <div>
                <label className={`block text-sm font-medium text-gray-700 mb-1 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
                  {language === 'dv' ? 'ސްޕޮންސަރ ލިންކް' : 'Sponsor URL'}
                </label>
                <input
                  type="text"
                  value={sponsoredUrl}
                  onChange={(e) => setSponsoredUrl(e.target.value)}
                  className="w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                  placeholder="https://..."
                />
              </div>
            </div>
          )}
          
          {/* Toggle for Advanced Options */}
          <div className="mt-4 border-t border-gray-200 pt-4">
            <button
              type="button"
              onClick={() => setShowAdvancedOptions(!showAdvancedOptions)}
              className="flex items-center text-blue-600 hover:text-blue-800"
            >
              <svg
                className={`w-4 h-4 mr-1 transition-transform ${showAdvancedOptions ? 'rotate-90' : ''}`}
                fill="currentColor"
                viewBox="0 0 20 20"
              >
                <path
                  fillRule="evenodd"
                  d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                  clipRule="evenodd"
                />
              </svg>
              <span className={language === 'dv' ? 'thaana-waheed' : ''}>
                {language === 'dv' 
                  ? (showAdvancedOptions ? 'އިތުރު އޮޕްޝަންތައް ފޮރުވާލާ' : 'އިތުރު އޮ
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
              <div>
                <label className={`block text-sm font-medium text-gray-700 mb-1 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
                  {language === 'dv' ? 'ނިއުސް ބާވަތް' : 'News Type'}
                </label>                <select
                  value={newsType}
                  onChange={(e) => setNewsType(e.target.value)}
                  className="w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                  aria-label={language === 'dv' ? 'ނިއުސް ބާވަތް' : 'News Type'}
                >
                  <option value="update">{language === 'dv' ? 'އަޕްޑޭޓް' : 'Update'}</option>
                  <option value="breaking">{language === 'dv' ? 'ބްރޭކިންގ' : 'Breaking'}</option>
                  <option value="feature">{language === 'dv' ? 'ފީޗަރ' : 'Feature'}</option>
                  <option value="opinion">{language === 'dv' ? 'ޚިޔާލު' : 'Opinion'}</option>
                  <option value="interview">{language === 'dv' ? 'އިންޓަރވިއު' : 'Interview'}</option>
                </select>
              </div>
              
              <div>
                <label className={`block text-sm font-medium text-gray-700 mb-1 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
                  {language === 'dv' ? 'ނިއުސް ޕްރައިއޮރިޓީ' : 'News Priority'}
                </label>                <select
                  value={newsPriority}
                  onChange={(e) => setNewsPriority(parseInt(e.target.value))}
                  className="w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                  aria-label={language === 'dv' ? 'ނިއުސް ޕްރައިއޮރިޓީ' : 'News Priority'}
                >
                  <option value="1">{language === 'dv' ? '1 - އެންމެ މުހިންމު' : '1 - Highest'}</option>
                  <option value="2">{language === 'dv' ? '2 - ވަރަށް މުހިންމު' : '2 - High'}</option>
                  <option value="3">{language === 'dv' ? '3 - މުހިންމު' : '3 - Medium'}</option>
                  <option value="4">{language === 'dv' ? '4 - މެދުމިން' : '4 - Low'}</option>
                  <option value="5">{language === 'dv' ? '5 - މުހިންމުނޫން' : '5 - Lowest'}</option>
                </select>
              </div>
              
              <div>
                <label className={`block text-sm font-medium text-gray-700 mb-1 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
                  {language === 'dv' ? 'ނިއުސް މަސްދަރު' : 'News Source'}
                </label>
                <input
                  type="text"
                  value={newsSource}
                  onChange={(e) => setNewsSource(e.target.value)}
                  className="w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                  placeholder={language === 'dv' ? 'މިސާލު: ރިޕޯޓަރ، ނޫސް ބަޔާން، ވެބްސައިޓް' : 'E.g. Reporter, Press Release, Website'}
                  dir={language === 'dv' ? 'rtl' : 'ltr'}
                />
              </div>
            </div>
              <div className="mb-4">
              <label className={`block text-sm font-medium text-gray-700 mb-1 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
                {language === 'dv' ? 'ޓެގްތައް' : 'Tags'}
              </label>
              <TagsInput 
                tags={tags} 
                onChange={setTags} 
                language={language} 
                placeholder={language === 'dv' ? 'ޓެގް ލިޔެ އެންމެރިތައްވާ' : 'Type a tag and press enter'}
              />
              <p className="mt-1 text-sm text-gray-500">
                {language === 'dv' ? 'ޓެގެއް ލިޔުއްވުމަށްފަހު އެންމެރިތައްވާ' : 'Type a tag and press enter to add it'}
              </p>
            </div>
            
            <div className="mb-4">
              <label className={`block text-sm font-medium text-gray-700 mb-1 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
                {language === 'dv' ? 'ލިޔުންތެރިޔާގެ ނޯޓްސް' : 'Author Notes'}
              </label>
              <textarea
                value={authorNotes}
                onChange={(e) => setAuthorNotes(e.target.value)}
                className={`w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 ${language === 'dv' ? 'thaana-waheed' : ''}`}
                rows={2}
                placeholder={language === 'dv' ? 'ލިޔުންތެރިޔާގެ އިތުރު ނޯޓްސް' : 'Additional notes from the author'}
                dir={language === 'dv' ? 'rtl' : 'ltr'}
              ></textarea>
            </div>
              {/* Related Articles Section */}            <h4 className={`text-md font-medium mb-2 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
              {language === 'dv' ? 'ގުޅުންހުރި ލިޔުންތައް' : 'Related Articles'}
            </h4>
            
            <div className="mb-4">
              <RelatedArticlesSelector
                selectedArticleIds={relatedArticles}
                onChange={setRelatedArticles}
                language={language}
              />
              <p className="mt-1 text-sm text-gray-500">
                {language === 'dv' ? 'ގުޅުންހުރި ލިޔުންތައް ހޯއްދަވާ އަދި އިންތިޚާބުކުރައްވާ' : 'Search and select related articles'}
              </p>
            </div>
                
            {/* SEO Section */}
            <h4 className={`text-md font-medium mb-2 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
              {language === 'dv' ? 'އެސްއީއޯ މަޢުލޫމާތު' : 'SEO Information'}
            </h4>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
              <div>
                <label className={`block text-sm font-medium text-gray-700 mb-1 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
                  {language === 'dv' ? 'މެޓާ ޓައިޓަލް' : 'Meta Title'}
                </label>
                <input
                  type="text"
                  value={metaTitle}
                  onChange={(e) => setMetaTitle(e.target.value)}
                  className="w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                  placeholder={language === 'dv' ? 'އެސްއީއޯ ޓައިޓަލް' : 'SEO title'}
                  dir={language === 'dv' ? 'rtl' : 'ltr'}
                />
              </div>
              
              <div>
                <label className={`block text-sm font-medium text-gray-700 mb-1 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
                  {language === 'dv' ? 'މެޓާ ޑިސްކްރިޕްޝަން' : 'Meta Description'}
                </label>
                <input
                  type="text"
                  value={metaDescription}
                  onChange={(e) => setMetaDescription(e.target.value)}
                  className="w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                  placeholder={language === 'dv' ? 'އެސްއީއޯ ޑިސްކްރިޕްޝަން' : 'SEO description'}
                  dir={language === 'dv' ? 'rtl' : 'ltr'}
                />
              </div>
                <div className="md:col-span-2">
                <label className={`block text-sm font-medium text-gray-700 mb-1 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
                  {language === 'dv' ? 'މެޓާ ކީވޯޑްސް' : 'Meta Keywords'}
                </label>
                <TagsInput 
                  tags={metaKeywords} 
                  onChange={setMetaKeywords} 
                  language={language} 
                  placeholder={language === 'dv' ? 'ކީވާޑް ލިޔެ އެންމެރިތައްވާ' : 'Type a keyword and press enter'}
                />
              </div>
            </div>
            
            {/* Translation Section */}
            <h4 className={`text-md font-medium mb-2 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
              {language === 'dv' ? 'ތަރުޖަމާ މަޢުލޫމާތު' : 'Translation Information'}
            </h4>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
              <div>
                <label className={`block text-sm font-medium text-gray-700 mb-1 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
                  {language === 'dv' ? 'އަސްލު މަސްދަރު ޔޫއާރްއެލް' : 'Original Source URL'}
                </label>
                <input
                  type="text"
                  value={originalSourceUrl}
                  onChange={(e) => setOriginalSourceUrl(e.target.value)}
                  className="w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                  placeholder="https://..."
                />
              </div>
              
              <div>
                <label className={`block text-sm font-medium text-gray-700 mb-1 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
                  {language === 'dv' ? 'ތަރުޖަމާ މަސްދަރު ޔޫއާރްއެލް' : 'Translation Source URL'}
                </label>
                <input
                  type="text"
                  value={translationSourceUrl}
                  onChange={(e) => setTranslationSourceUrl(e.target.value)}
                  className="w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                  placeholder="https://..."
                />
              </div>
                <div>
                <label className={`block text-sm font-medium text-gray-700 mb-1 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
                  {language === 'dv' ? 'ތަރުޖަމާ ބަސް' : 'Translation Source Language'}
                </label>
                <LanguageSelector
                  value={translationSourceLang}
                  onChange={setTranslationSourceLang}
                  language={language}
                />
              </div>
              
              <div>
                <label className={`block text-sm font-medium text-gray-700 mb-1 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
                  {language === 'dv' ? 'ތަރުޖަމާ ނޯޓްސް' : 'Translation Notes'}
                </label>
                <input
                  type="text"
                  value={translationNotes}
                  onChange={(e) => setTranslationNotes(e.target.value)}
                  className="w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                  placeholder={language === 'dv' ? 'ތަރުޖަމާކުރުމާއި ބެހޭ ނޯޓްސް' : 'Notes about the translation'}
                  dir={language === 'dv' ? 'rtl' : 'ltr'}
                />
              </div>
            </div>
          </div>
        )}
        
        <div className="border-b border-gray-200 mb-4">
          <div className="flex flex-wrap gap-2 pb-4">
            <button
              onClick={() => editor?.chain().focus().toggleBold().run()}
              className={`p-2 rounded hover:bg-gray-100 ${
                editor?.isActive('bold') ? 'bg-gray-100' : ''
              }`}
              title="Bold"
            >
              <Bold size={20} />
            </button>
            <button
              onClick={() => editor?.chain().focus().toggleItalic().run()}
              className={`p-2 rounded hover:bg-gray-100 ${
                editor?.isActive('italic') ? 'bg-gray-100' : ''
              }`}
              title="Italic"
            >
              <Italic size={20} />
            </button>
            <button
              onClick={() => editor?.chain().focus().toggleHeading({ level: 1 }).run()}
              className={`p-2 rounded hover:bg-gray-100 ${
                editor?.isActive('heading', { level: 1 }) ? 'bg-gray-100' : ''
              }`}
              title="Heading 1"
            >
              <Heading1 size={20} />
            </button>
            <button
              onClick={() => editor?.chain().focus().toggleHeading({ level: 2 }).run()}
              className={`p-2 rounded hover:bg-gray-100 ${
                editor?.isActive('heading', { level: 2 }) ? 'bg-gray-100' : ''
              }`}
              title="Heading 2"
            >
              <Heading2 size={20} />
            </button>
            <button
              onClick={() => editor?.chain().focus().toggleBulletList().run()}
              className={`p-2 rounded hover:bg-gray-100 ${
                editor?.isActive('bulletList') ? 'bg-gray-100' : ''
              }`}
              title="Bullet List"
            >
              <List size={20} />
            </button>
            <button
              onClick={() => editor?.chain().focus().toggleOrderedList().run()}
              className={`p-2 rounded hover:bg-gray-100 ${
                editor?.isActive('orderedList') ? 'bg-gray-100' : ''
              }`}
              title="Numbered List"
            >
              <ListOrdered size={20} />
            </button>
            <button
              onClick={() => editor?.chain().focus().toggleBlockquote().run()}
              className={`p-2 rounded hover:bg-gray-100 ${
                editor?.isActive('blockquote') ? 'bg-gray-100' : ''
              }`}
              title="Quote"
            >
              <Quote size={20} />
            </button>
            <button
              onClick={() => editor?.chain().focus().toggleCode().run()}
              className={`p-2 rounded hover:bg-gray-100 ${
                editor?.isActive('code') ? 'bg-gray-100' : ''
              }`}
              title="Code"
            >
              <Code size={20} />
            </button>
            <button
              onClick={() => editor?.chain().focus().toggleHighlight().run()}
              className={`p-2 rounded hover:bg-gray-100 ${
                editor?.isActive('highlight') ? 'bg-gray-100' : ''
              }`}
              title="Highlight"
            >
              <Highlighter size={20} />
            </button>
            <button
              onClick={addImage}
              className="p-2 rounded hover:bg-gray-100"
              title="Insert Image"
            >
              <ImageIcon size={20} />
            </button>
            <button
              onClick={addLink}
              className={`p-2 rounded hover:bg-gray-100 ${
                editor?.isActive('link') ? 'bg-gray-100' : ''
              }`}
              title="Insert Link"
            >
              <LinkIcon size={20} />
            </button>
            <button
              onClick={() => editor?.chain().focus().undo().run()}
              className="p-2 rounded hover:bg-gray-100 ml-auto"
              title="Undo"
            >
              <Undo size={20} />
            </button>
            <button
              onClick={() => editor?.chain().focus().redo().run()}
              className="p-2 rounded hover:bg-gray-100"
              title="Redo"
            >
              <Redo size={20} />
            </button>
          </div>
        </div>

        <EditorContent editor={editor} className="min-h-[300px]" />
        
        <div className="mt-2 flex justify-end">
          <WordCounter editor={editor} language={language} />
        </div>
      </div>      <div className="flex justify-end gap-4 mt-6">
        {/* Auto-save toggle */}
        <div className="flex items-center mr-auto">
          <input
            type="checkbox"
            id="auto-save-toggle"
            checked={autoSaveEnabled}
            onChange={(e) => setAutoSaveEnabled(e.target.checked)}
            className="w-4 h-4 text-blue-600 rounded focus:ring-blue-500"
          />
          <label 
            htmlFor="auto-save-toggle" 
            className={`ml-2 text-sm text-gray-600 ${language === 'dv' ? 'thaana-waheed' : ''}`}
          >
            {language === 'dv' ? 'އޮޓޯ ސޭވް (މިނެޓަކުން 1 ފަހަރު)' : 'Auto-save (every 1 min)'}
          </label>
        </div>

        <button
          onClick={() => setShowPreview(true)}
          type="button"
          className="px-6 py-2 rounded-lg border border-gray-300 text-gray-700 hover:bg-gray-50 transition-colors flex items-center gap-2"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
            <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
            <path fillRule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clipRule="evenodd" />
          </svg>
          <span className={language === 'dv' ? 'thaana-waheed' : ''}>
            {language === 'dv' ? 'ޕްރިވިއު' : 'Preview'}
          </span>
        </button>        <button
          onClick={() => handleSaveDraft(false)}
          disabled={saving}
          className="px-6 py-2 rounded-lg border border-gray-300 text-gray-700 hover:bg-gray-50 transition-colors flex items-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {saving ? (
            <Loader2 size={18} className="animate-spin" />
          ) : (
            <Save size={18} />
          )}
          <span className={language === 'dv' ? 'thaana-waheed' : ''}>
            {language === 'dv' ? 'ޑްރާފްޓް ކުރައްވާ' : 'Save as Draft'}
          </span>
        </button>
        <button
          onClick={handlePublish}
          disabled={publishing}
          className="px-6 py-2 rounded-lg bg-blue-700 text-white hover:bg-blue-800 transition-colors flex items-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {publishing ? (
            <Loader2 size={18} className="animate-spin" />
          ) : (
            <Send size={18} />
          )}
          <span className={language === 'dv' ? 'thaana-waheed' : ''}>
            {language === 'dv' ? 'ޝާއިޢު ކުރައްވާ' : 'Publish'}
          </span>
        </button>
      </div>

      {showPreview && editor && (
        <ArticlePreview
          title={title}
          heading={heading}
          coverImage={coverImage}
          imageCaption={imageCaption}
          content={convertToTipTapDocument(editor.getJSON())}
          isBreaking={isBreaking}
          isFeatured={isFeatured}
          isDeveloping={isDeveloping}
          isExclusive={isExclusive}
          isSponsored={isSponsored}
          sponsoredBy={sponsoredBy}
          newsType={newsType}
          newsSource={newsSource}
          tags={tags}
          language={language}
          onClose={() => setShowPreview(false)}
        />
      )}

      <ImageBrowser
        isOpen={showImageBrowser}
        onClose={() => setShowImageBrowser(false)}
        onSelect={handleImageSelect}
        language={language}
      />

      {/* Save and Continue component for long-form content */}      <SaveAndContinue
        onSaveAsDraft={() => handleSaveDraft(true)}
        isSaving={saving}
        lastSaved={lastSaved}
        language={language}
      />
      <UnsavedChangesWarning 
        hasUnsavedChanges={hasUnsavedChanges} 
        navigationBlockMessage={language === 'dv' ? 
          'ފޯމުގައި ސޭވް ނުކުރާ ބަދަލުތަކެއް ހުރެދާނެ. ކަށަވަރުންވެސް މިޞަފްޙާއިން ބޭރަށް ދާން ބޭނުންތޯ؟' : 
          'You have unsaved changes in your article. Are you sure you want to leave this page?'
        }
      />
    </div>
  );
};

export default NewArticle;