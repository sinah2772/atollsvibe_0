import React, { useState, useEffect, useRef, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { useEditor, EditorContent } from '@tiptap/react';
import StarterKit from '@tiptap/starter-kit';
import Image from '@tiptap/extension-image';
import Link from '@tiptap/extension-link';
import Highlight from '@tiptap/extension-highlight';
import { JSONContent } from '@tiptap/core';

// Component imports
import { MultiSelect } from '../components/MultiSelect';
import { IslandsSelect } from '../components/IslandsSelect';
import ImageBrowser from '../components/ImageBrowser';
import CategorySelector from '../components/CategorySelector';
import RelatedArticlesSelector from '../components/RelatedArticlesSelector';
import TagsInput from '../components/TagsInput';
import LanguageSelector from '../components/LanguageSelector';
import WordCounter from '../components/WordCounter';
import FormValidationIndicator from '../components/FormValidationIndicator';
import SaveAndContinue from '../components/SaveAndContinue';
import UnsavedChangesWarning from '../components/UnsavedChangesWarning';
import ArticlePreview from '../components/ArticlePreview';

// Icons
import {
  Bold, Italic, List, ListOrdered, Quote,
  Undo, Redo, Image as ImageIcon,
  Link as LinkIcon, Heading1, Heading2,
  Code, Highlighter, Save, Languages,
  Loader2, Send
} from 'lucide-react';

// Hooks
import { useArticles } from '../hooks/useArticles';
import { useCategories } from '../hooks/useCategories';
import { useAtolls } from '../hooks/useAtolls';
import { useUser } from '../hooks/useUser';
import { useGovernment } from '../hooks/useGovernment';
import useAutoSave from '../hooks/useAutoSave';
import useFormChangeTracker from '../hooks/useFormChangeTracker';

// Types
import type { MarkType, NodeType, ArticleMetadata } from '../types/editor';

export type NewsType = 'update' | 'breaking' | 'feature' | 'opinion' | 'interview';
export type NewsPriority = 1 | 2 | 3 | 4 | 5;

import { ValidationField, EditorState } from '../types/editor';

type ArticleEditorState = EditorState;

const initialEditorState: ArticleEditorState = {
  language: 'dv',
  showImageBrowser: false,
  showPreview: false,
  showAdvancedOptions: false,
  hasUnsavedChanges: false,
  formTouched: false,
  error: null,
  saving: false,
  publishing: false,
  autoSaveEnabled: true,
  lastSaved: null,
  validationFields: []
};

export interface ArticleData {
  title: string;
  heading: string;
  socialHeading: string;
  content: Record<string, unknown>;
  category: string;
  subcategory: string | null;
  atollIds: number[];
  islandIds: number[];
  governmentIds: string[];
  coverImage: string;
  imageCaption: string;
  isBreaking: boolean;
  isFeatured: boolean;
  isDeveloping: boolean;
  isExclusive: boolean;
  isSponsored: boolean;
  sponsoredBy: string;
  sponsoredUrl: string;
  newsType: NewsType;
  newsPriority: NewsPriority;
  newsSource: string;
  tags: string[];
  metaTitle: string;
  metaDescription: string;
  metaKeywords: string[];
  authorNotes: string;
  originalSourceUrl: string;
  translationSourceUrl: string;
  translationSourceLang: string;
  translationNotes: string;
  relatedArticles: string[];
}

const initialArticleState: ArticleData = {
  title: '',
  heading: '',
  socialHeading: '',
  content: {},
  category: '',
  subcategory: null,
  atollIds: [],
  islandIds: [],
  governmentIds: [],
  coverImage: '',
  imageCaption: '',
  isBreaking: false,
  isFeatured: false,
  isDeveloping: false,
  isExclusive: false,
  isSponsored: false,
  sponsoredBy: '',
  sponsoredUrl: '',
  newsType: 'update',
  newsPriority: 3,
  newsSource: '',
  tags: [],
  metaTitle: '',
  metaDescription: '',
  metaKeywords: [],
  authorNotes: '',
  originalSourceUrl: '',
  translationSourceUrl: '',
  translationSourceLang: '',
  translationNotes: '',
  relatedArticles: []
};

// Type guard functions
const isValidNewsType = (value: string): value is NewsType => {
  return ['update', 'breaking', 'feature', 'opinion', 'interview'].includes(value);
};

const isValidPriority = (value: number): value is NewsPriority => {
  return [1, 2, 3, 4, 5].includes(value);
};

const convertToRecord = (content: JSONContent | undefined): Record<string, unknown> => {
  if (!content) {
    return { type: 'doc', content: [] };
  }
  return { 
    type: content.type || 'doc',
    content: Array.isArray(content.content) ? content.content : []
  } as Record<string, unknown>;
};

const NewArticle: React.FC = () => {
  const navigate = useNavigate();
  const { createArticle } = useArticles();
  const { categories } = useCategories();
  const { atolls, error: atollsError, useFallbackData } = useAtolls();
  const { user, loading: userLoading } = useUser();
  const { government, error: governmentError, useFallbackData: useGovernmentFallbackData } = useGovernment();

  // State management
  const [articleState, setArticleState] = useState<ArticleData>(initialArticleState);
  const [editorState, setEditorState] = useState<ArticleEditorState>(initialEditorState);
  const isInitialRender = useRef(true);

  // Initialize editor
  const editor = useEditor({
    extensions: [
      StarterKit,
      Image,
      Link.configure({ openOnClick: false }),
      Highlight
    ],
    content: '',
    editorProps: {
      attributes: {
        class: `prose prose-lg max-w-none focus:outline-none min-h-[300px] ${editorState.language === 'dv' ? 'thaana-waheed' : ''}`
      }
    },
    onUpdate: () => {
      if (!isInitialRender.current) {
        setEditorState(prev => ({ ...prev, hasUnsavedChanges: true }));
      }
    }
  });

  // Editor state update helper with proper typing
  const updateEditorState = useCallback((updates: Partial<ArticleEditorState>) => {
    setEditorState(prevState => ({
      ...prevState,
      ...updates
    }));
  }, []);

  // Article state update helper with type checking
  const updateArticleState = useCallback((updates: Partial<ArticleData>) => {
    setArticleState(prevState => {
      const newState = { ...prevState };
      
      // Handle special cases for enums
      if ('newsType' in updates) {
        const newsType = updates.newsType;
        if (typeof newsType === 'string' && isValidNewsType(newsType)) {
          newState.newsType = newsType;
        }
      }
      
      if ('newsPriority' in updates) {
        const priority = updates.newsPriority;
        if (typeof priority === 'number' && isValidPriority(priority)) {
          newState.newsPriority = priority;
        }
      }
      
      // Apply other updates
      Object.assign(newState, updates);
      
      if (!isInitialRender.current) {
        updateEditorState({ hasUnsavedChanges: true });
      }
      
      return newState;
    });
  }, [updateEditorState]);

  // Track form changes for unsaved changes detection
  useFormChangeTracker(
    articleState,
    {
      onChange: () => setEditorState(prev => ({ ...prev, hasUnsavedChanges: true })),
      resetOnInit: true,
      enabled: true
    }
  );

  // Initialize auto-save
  useAutoSave({
    data: articleState,
    onSave: async () => {
      if (editor && (editor.getText().length > 50 || articleState.title.length > 10)) {
        try {
          await handleSaveDraft(true);
          setEditorState({ 
            lastSaved: new Date(), 
            hasUnsavedChanges: false 
          });
        } catch (error) {
          console.error('Auto-save failed:', error);
        }
      }
    },
    interval: 60000,
    enabled: editorState.autoSaveEnabled,
    minChanges: 3
  });

  // Update editor when language changes
  useEffect(() => {
    if (editor) {
      editor.setOptions({
        editorProps: {
          attributes: {
            class: `prose prose-lg max-w-none focus:outline-none min-h-[300px] ${editorState.language === 'dv' ? 'thaana-waheed' : ''}`
          }
        }
      });
    }
  }, [editorState.language, editor]);

  // Authentication check
  useEffect(() => {
    if (!userLoading && !user) {
      navigate('/login', { replace: true });
    }
  }, [user, userLoading, navigate]);

  // Clear initial render flag after mount
  useEffect(() => {
    if (isInitialRender.current) {
      isInitialRender.current = false;
    }
  }, []);

  // Clear island selections when atoll selection changes
  useEffect(() => {
    setArticleState(prev => ({ ...prev, subcategory: null }));
  }, [articleState.category]);

  // Editor functions
  const handleAddImage = () => {
    setEditorState(prev => ({ ...prev, showImageBrowser: true }));
  };

  const handleImageSelect = useCallback((url: string) => {
    if (editor) {
      editor.chain().focus().setImage({ src: url }).run();
    }
    setEditorState(prev => ({ ...prev, showImageBrowser: false }));
  }, [editor]);

  const handleAddLink = () => {
    const url = window.prompt('Enter URL');
    if (url && editor) {
      editor.chain().focus().setLink({ href: url }).run();
    }
  };

  // Article data preparation
  const prepareArticleData = (): NewArticleState | null => {
    if (!editor || !user) return null;

    return {
      title: articleState.title,
      heading: articleState.heading,
      social_heading: articleState.socialHeading,
      content: editor.getJSON() as Record<string, unknown>,
      category_id: parseInt(articleState.category),
      subcategory_id: articleState.subcategory ? parseInt(articleState.subcategory) : null,
      cover_image: articleState.coverImage,
      image_caption: articleState.imageCaption,
      user_id: user.id,
      status: 'draft',
      publish_date: null,
      is_breaking: articleState.isBreaking,
      is_featured: articleState.isFeatured,
      is_developing: articleState.isDeveloping,
      is_exclusive: articleState.isExclusive,
      is_sponsored: articleState.isSponsored,
      sponsored_by: articleState.isSponsored ? articleState.sponsoredBy : null,
      sponsored_url: articleState.isSponsored ? articleState.sponsoredUrl : null,
      news_type: articleState.newsType,
      news_priority: articleState.newsPriority,
      news_source: articleState.newsSource,
      meta_title: articleState.metaTitle,
      meta_description: articleState.metaDescription,
      meta_keywords: articleState.metaKeywords,
      tags: articleState.tags,
      author_notes: articleState.authorNotes,
      original_source_url: articleState.originalSourceUrl,
      translation_source_url: articleState.translationSourceUrl,
      translation_source_lang: articleState.translationSourceLang,
      translation_notes: articleState.translationNotes
    };
  };

  // Validation
  const validateForm = (): boolean => {
    setEditorState(prev => ({ ...prev, formTouched: true }));
    
    const validations: ValidationField[] = [
      {
        name: editorState.language === 'dv' ? 'ސުރުޚީ (ލެޓިން)' : 'Title (Latin)',
        valid: !!articleState.title.trim(),
        errorMessage: editorState.language === 'dv' ? 'ސުރުޚީ ލިޔުއްވާ' : 'Please enter a title'
      },
      {
        name: editorState.language === 'dv' ? 'ސުރުޚީ (ދިވެހި)' : 'Heading (Thaana)',
        valid: !!articleState.heading.trim(),
        errorMessage: editorState.language === 'dv' ? 'ދިވެހި ސުރުޚީ ލިޔުއްވާ' : 'Please enter a heading'
      },
      {
        name: editorState.language === 'dv' ? 'ކެޓަގަރީ' : 'Category',
        valid: !!articleState.category,
        errorMessage: editorState.language === 'dv' ? 'ކެޓަގަރީއެއް އިޚްތިޔާރުކުރައްވާ' : 'Please select a category'
      }
    ];

    setEditorState(prev => ({ ...prev, validationFields: validations }));
    return validations.every(v => v.valid);
  };

  // Add typed handlers for save and publish
  const handleSaveDraft = async (stayOnPage: boolean = false) => {
    if (!editor) return;
    
    updateEditorState({ formTouched: true });
    
    if (!validateForm()) return;
    
    try {
      updateEditorState({
        ...editorState,
        saving: true,
        error: null
      });
      
      if (!user) {
        navigate('/login', { replace: true });
        return;
      }

      await createArticle({
        ...articleState,
        content: convertToRecord(editor.getJSON()),
        status: 'draft',
        publish_date: null,
        user_id: user.id
      });

      updateEditorState({
        ...editorState,
        lastSaved: new Date(),
        hasUnsavedChanges: false,
        saving: false
      });
      
      if (!stayOnPage) {
        navigate('/articles');
      }
    } catch (error) {
      console.error('Failed to save draft:', error);
      updateEditorState({
        ...editorState,
        error: editorState.language === 'dv' 
          ? 'ޑްރާފްޓް ކުރުމުގައި މަްސަލައެއް ދިމާވެއްޖެ' 
          : 'Failed to save draft. Please try again.',
        saving: false
      });
    }
  };

  const handlePublish = async () => {
    if (!editor) return;
    
    updateEditorState({ formTouched: true });
    
    if (!validateForm()) return;
    
    try {
      updateEditorState({
        ...editorState,
        publishing: true,
        error: null
      });
      
      if (!user) {
        navigate('/login', { replace: true });
        return;
      }

      await createArticle({
        ...articleState,
        content: convertToRecord(editor.getJSON()),
        status: 'published',
        publish_date: new Date().toISOString(),
        user_id: user.id
      });
      
      updateEditorState({
        ...editorState,
        hasUnsavedChanges: false,
        publishing: false
      });
      
      navigate('/articles');
    } catch (error) {
      console.error('Failed to publish:', error);
      updateEditorState({
        ...editorState,
        error: editorState.language === 'dv' 
          ? 'ޝާއިޢު ކުރުމުގައި މަްސަލައެއް ދިމާވެއްޖެ' 
          : 'Failed to publish. Please try again.',
        publishing: false
      });
    }
  };

  // Handle news type change
  const handleNewsTypeChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {
    const value = e.target.value;
    if (isValidNewsType(value)) {
      updateArticleState({ newsType: value });
    }
  }, [updateArticleState]);

  // Handle priority change
  const handlePriorityChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {
    const value = parseInt(e.target.value);
    if (isValidPriority(value)) {
      updateArticleState({ newsPriority: value });
    }
  }, [updateArticleState]);

  // Handle language toggle
  const toggleLanguage = useCallback(() => {
    updateEditorState(prev => ({
      ...prev,
      language: prev.language === 'dv' ? 'en' : 'dv'
    }));
  }, []);

  // Clear island selections when atoll selection changes
  useEffect(() => {
    setArticleState(prev => ({ ...prev, subcategory: null }));
  }, [articleState.category]);

  // Editor functions
  const handleAddImage = () => {
    setEditorState(prev => ({ ...prev, showImageBrowser: true }));
  };

  const handleImageSelect = useCallback((url: string) => {
    if (editor) {
      editor.chain().focus().setImage({ src: url }).run();
    }
    setEditorState(prev => ({ ...prev, showImageBrowser: false }));
  }, [editor]);

  const handleAddLink = () => {
    const url = window.prompt('Enter URL');
    if (url && editor) {
      editor.chain().focus().setLink({ href: url }).run();
    }
  };

  // Article data preparation
  const prepareArticleData = (): NewArticleState | null => {
    if (!editor || !user) return null;

    return {
      title: articleState.title,
      heading: articleState.heading,
      social_heading: articleState.socialHeading,
      content: editor.getJSON() as Record<string, unknown>,
      category_id: parseInt(articleState.category),
      subcategory_id: articleState.subcategory ? parseInt(articleState.subcategory) : null,
      cover_image: articleState.coverImage,
      image_caption: articleState.imageCaption,
      user_id: user.id,
      status: 'draft',
      publish_date: null,
      is_breaking: articleState.isBreaking,
      is_featured: articleState.isFeatured,
      is_developing: articleState.isDeveloping,
      is_exclusive: articleState.isExclusive,
      is_sponsored: articleState.isSponsored,
      sponsored_by: articleState.isSponsored ? articleState.sponsoredBy : null,
      sponsored_url: articleState.isSponsored ? articleState.sponsoredUrl : null,
      news_type: articleState.newsType,
      news_priority: articleState.newsPriority,
      news_source: articleState.newsSource,
      meta_title: articleState.metaTitle,
      meta_description: articleState.metaDescription,
      meta_keywords: articleState.metaKeywords,
      tags: articleState.tags,
      author_notes: articleState.authorNotes,
      original_source_url: articleState.originalSourceUrl,
      translation_source_url: articleState.translationSourceUrl,
      translation_source_lang: articleState.translationSourceLang,
      translation_notes: articleState.translationNotes
    };
  };

  // Validation
  const validateForm = (): boolean => {
    setEditorState(prev => ({ ...prev, formTouched: true }));
    
    const validations: ValidationField[] = [
      {
        name: editorState.language === 'dv' ? 'ސުރުޚީ (ލެޓިން)' : 'Title (Latin)',
        valid: !!articleState.title.trim(),
        errorMessage: editorState.language === 'dv' ? 'ސުރުޚީ ލިޔުއްވާ' : 'Please enter a title'
      },
      {
        name: editorState.language === 'dv' ? 'ސުރުޚީ (ދިވެހި)' : 'Heading (Thaana)',
        valid: !!articleState.heading.trim(),
        errorMessage: editorState.language === 'dv' ? 'ދިވެހި ސުރުޚީ ލިޔުއްވާ' : 'Please enter a heading'
      },
      {
        name: editorState.language === 'dv' ? 'ކެޓަގަރީ' : 'Category',
        valid: !!articleState.category,
        errorMessage: editorState.language === 'dv' ? 'ކެޓަގަރީއެއް އިޚްތިޔާރުކުރައްވާ' : 'Please select a category'
      }
    ];

    setEditorState(prev => ({ ...prev, validationFields: validations }));
    return validations.every(v => v.valid);
  };

  // Add typed handlers for save and publish
  const handleSaveDraft = async (stayOnPage: boolean = false) => {
    if (!editor) return;
    
    updateEditorState({ formTouched: true });
    
    if (!validateForm()) return;
    
    try {
      updateEditorState({
        ...editorState,
        saving: true,
        error: null
      });
      
      if (!user) {
        navigate('/login', { replace: true });
        return;
      }

      await createArticle({
        ...articleState,
        content: convertToRecord(editor.getJSON()),
        status: 'draft',
        publish_date: null,
        user_id: user.id
      });

      updateEditorState({
        ...editorState,
        lastSaved: new Date(),
        hasUnsavedChanges: false,
        saving: false
      });
      
      if (!stayOnPage) {
        navigate('/articles');
      }
    } catch (error) {
      console.error('Failed to save draft:', error);
      updateEditorState({
        ...editorState,
        error: editorState.language === 'dv' 
          ? 'ޑްރާފްޓް ކުރުމުގައި މަްސަލައެއް ދިމާވެއްޖެ' 
          : 'Failed to save draft. Please try again.',
        saving: false
      });
    }
  };

  const handlePublish = async () => {
    if (!editor) return;
    
    updateEditorState({ formTouched: true });
    
    if (!validateForm()) return;
    
    try {
      updateEditorState({
        ...editorState,
        publishing: true,
        error: null
      });
      
      if (!user) {
        navigate('/login', { replace: true });
        return;
      }

      await createArticle({
        ...articleState,
        content: convertToRecord(editor.getJSON()),
        status: 'published',
        publish_date: new Date().toISOString(),
        user_id: user.id
      });
      
      updateEditorState({
        ...editorState,
        hasUnsavedChanges: false,
        publishing: false
      });
      
      navigate('/articles');
    } catch (error) {
      console.error('Failed to publish:', error);
      updateEditorState({
        ...editorState,
        error: editorState.language === 'dv' 
          ? 'ޝާއިޢު ކުރުމުގައި މަްސަލައެއް ދިމާވެއްޖެ' 
          : 'Failed to publish. Please try again.',
        publishing: false
      });
    }
  };

  // Handle news type change
  const handleNewsTypeChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {
    const value = e.target.value;
    if (isValidNewsType(value)) {
      updateArticleState({ newsType: value });
    }
  }, [updateArticleState]);

  // Handle priority change
  const handlePriorityChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {
    const value = parseInt(e.target.value);
    if (isValidPriority(value)) {
      updateArticleState({ newsPriority: value });
    }
  }, [updateArticleState]);

  // Handle language toggle
  const toggleLanguage = useCallback(() => {
    updateEditorState(prev => ({
      ...prev,
      language: prev.language === 'dv' ? 'en' : 'dv'
    }));
  }, []);

  // Clear island selections when atoll selection changes
  useEffect(() => {
    setArticleState(prev => ({ ...prev, subcategory: null }));
  }, [articleState.category]);

  // Editor functions
  const handleAddImage = () => {
    setEditorState(prev => ({ ...prev, showImageBrowser: true }));
  };

  const handleImageSelect = useCallback((url: string) => {
    if (editor) {
      editor.chain().focus().setImage({ src: url }).run();
    }
    setEditorState(prev => ({ ...prev, showImageBrowser: false }));
  }, [editor]);

  const handleAddLink = () => {
    const url = window.prompt('Enter URL');
    if (url && editor) {
      editor.chain().focus().setLink({ href: url }).run();
    }
  };

  // Article data preparation
  const prepareArticleData = (): NewArticleState | null => {
    if (!editor || !user) return null;

    return {
      title: articleState.title,
      heading: articleState.heading,
      social_heading: articleState.socialHeading,
      content: editor.getJSON() as Record<string, unknown>,
      category_id: parseInt(articleState.category),
      subcategory_id: articleState.subcategory ? parseInt(articleState.subcategory) : null,
      cover_image: articleState.coverImage,
      image_caption: articleState.imageCaption,
      user_id: user.id,
      status: 'draft',
      publish_date: null,
      is_breaking: articleState.isBreaking,
      is_featured: articleState.isFeatured,
      is_developing: articleState.isDeveloping,
      is_exclusive: articleState.isExclusive,
      is_sponsored: articleState.isSponsored,
      sponsored_by: articleState.isSponsored ? articleState.sponsoredBy : null,
      sponsored_url: articleState.isSponsored ? articleState.sponsoredUrl : null,
      news_type: articleState.newsType,
      news_priority: articleState.newsPriority,
      news_source: articleState.newsSource,
      meta_title: articleState.metaTitle,
      meta_description: articleState.metaDescription,
      meta_keywords: articleState.metaKeywords,
      tags: articleState.tags,
      author_notes: articleState.authorNotes,
      original_source_url: articleState.originalSourceUrl,
      translation_source_url: articleState.translationSourceUrl,
      translation_source_lang: articleState.translationSourceLang,
      translation_notes: articleState.translationNotes
    };
  };

  // Validation
  const validateForm = (): boolean => {
    setEditorState(prev => ({ ...prev, formTouched: true }));
    
    const validations: ValidationField[] = [
      {
        name: editorState.language === 'dv' ? 'ސުރުޚީ (ލެޓިން)' : 'Title (Latin)',
        valid: !!articleState.title.trim(),
        errorMessage: editorState.language === 'dv' ? 'ސުރުޚީ ލިޔުއްވާ' : 'Please enter a title'
      },
      {
        name: editorState.language === 'dv' ? 'ސުރުޚީ (ދިވެހި)' : 'Heading (Thaana)',
        valid: !!articleState.heading.trim(),
        errorMessage: editorState.language === 'dv' ? 'ދިވެހި ސުރުޚީ ލިޔުއްވާ' : 'Please enter a heading'
      },
      {
        name: editorState.language === 'dv' ? 'ކެޓަގަރީ' : 'Category',
        valid: !!articleState.category,
        errorMessage: editorState.language === 'dv' ? 'ކެޓަގަރީއެއް އިޚްތިޔާރުކުރައްވާ' : 'Please select a category'
      }
    ];

    setEditorState(prev => ({ ...prev, validationFields: validations }));
    return validations.every(v => v.valid);
  };

  // Add typed handlers for save and publish
  const handleSaveDraft = async (stayOnPage: boolean = false) => {
    if (!editor) return;
    
    updateEditorState({ formTouched: true });
    
    if (!validateForm()) return;
    
    try {
      updateEditorState({
        ...editorState,
        saving: true,
        error: null
      });
      
      if (!user) {
        navigate('/login', { replace: true });
        return;
      }

      await createArticle({
        ...articleState,
        content: convertToRecord(editor.getJSON()),
        status: 'draft',
        publish_date: null,
        user_id: user.id
      });

      updateEditorState({
        ...editorState,
        lastSaved: new Date(),
        hasUnsavedChanges: false,
        saving: false
      });
      
      if (!stayOnPage) {
        navigate('/articles');
      }
    } catch (error) {
      console.error('Failed to save draft:', error);
      updateEditorState({
        ...editorState,
        error: editorState.language === 'dv' 
          ? 'ޑްރާފްޓް ކުރުމުގައި މަްސަލައެއް ދިމާވެއްޖެ' 
          : 'Failed to save draft. Please try again.',
        saving: false
      });
    }
  };

  const handlePublish = async () => {
    if (!editor) return;
    
    updateEditorState({ formTouched: true });
    
    if (!validateForm()) return;
    
    try {
      updateEditorState({
        ...editorState,
        publishing: true,
        error: null
      });
      
      if (!user) {
        navigate('/login', { replace: true });
        return;
      }

      await createArticle({
        ...articleState,
        content: convertToRecord(editor.getJSON()),
        status: 'published',
        publish_date: new Date().toISOString(),
        user_id: user.id
      });
      
      updateEditorState({
        ...editorState,
        hasUnsavedChanges: false,
        publishing: false
      });
      
      navigate('/articles');
    } catch (error) {
      console.error('Failed to publish:', error);
      updateEditorState({
        ...editorState,
        error: editorState.language === 'dv' 
          ? 'ޝާއިޢު ކުރުމުގައި މަްސަލައެއް ދިމާވެއްޖެ' 
          : 'Failed to publish. Please try again.',
        publishing: false
      });
    }
  };

  // Handle news type change
  const handleNewsTypeChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {
    const value = e.target.value;
    if (isValidNewsType(value)) {
      updateArticleState({ newsType: value });
    }
  }, [updateArticleState]);

  // Handle priority change
  const handlePriorityChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {
    const value = parseInt(e.target.value);
    if (isValidPriority(value)) {
      updateArticleState({ newsPriority: value });
    }
  }, [updateArticleState]);

  // Handle language toggle
  const toggleLanguage = useCallback(() => {
    updateEditorState(prev => ({
      ...prev,
      language: prev.language === 'dv' ? 'en' : 'dv'
    }));
  }, []);

  // Clear island selections when atoll selection changes
  useEffect(() => {
    setArticleState(prev => ({ ...prev, subcategory: null }));
  }, [articleState.category]);

  // Editor functions
  const handleAddImage = () => {
    setEditorState(prev => ({ ...prev, showImageBrowser: true }));
  };

  const handleImageSelect = useCallback((url: string) => {
    if (editor) {
      editor.chain().focus().setImage({ src: url }).run();
    }
    setEditorState(prev => ({ ...prev, showImageBrowser: false }));
  }, [editor]);

  const handleAddLink = () => {
    const url = window.prompt('Enter URL');
    if (url && editor) {
      editor.chain().focus().setLink({ href: url }).run();
    }
  };

  // Article data preparation
  const prepareArticleData = (): NewArticleState | null => {
    if (!editor || !user) return null;

    return {
      title: articleState.title,
      heading: articleState.heading,
      social_heading: articleState.socialHeading,
      content: editor.getJSON() as Record<string, unknown>,
      category_id: parseInt(articleState.category),
      subcategory_id: articleState.subcategory ? parseInt(articleState.subcategory) : null,
      cover_image: articleState.coverImage,
      image_caption: articleState.imageCaption,
      user_id: user.id,
      status: 'draft',
      publish_date: null,
      is_breaking: articleState.isBreaking,
      is_featured: articleState.isFeatured,
      is_developing: articleState.isDeveloping,
      is_exclusive: articleState.isExclusive,
      is_sponsored: articleState.isSponsored,
      sponsored_by: articleState.isSponsored ? articleState.sponsoredBy : null,
      sponsored_url: articleState.isSponsored ? articleState.sponsoredUrl : null,
      news_type: articleState.newsType,
      news_priority: articleState.newsPriority,
      news_source: articleState.newsSource,
      meta_title: articleState.metaTitle,
      meta_description: articleState.metaDescription,
      meta_keywords: articleState.metaKeywords,
      tags: articleState.tags,
      author_notes: articleState.authorNotes,
      original_source_url: articleState.originalSourceUrl,
      translation_source_url: articleState.translationSourceUrl,
      translation_source_lang: articleState.translationSourceLang,
      translation_notes: articleState.translationNotes
    };
  };

  // Validation
  const validateForm = (): boolean => {
    setEditorState(prev => ({ ...prev, formTouched: true }));
    
    const validations: ValidationField[] = [
      {
        name: editorState.language === 'dv' ? 'ސުރުޚީ (ލެޓިން)' : 'Title (Latin)',
        valid: !!articleState.title.trim(),
        errorMessage: editorState.language === 'dv' ? 'ސުރުޚީ ލިޔުއްވާ' : 'Please enter a title'
      },
      {
        name: editorState.language === 'dv' ? 'ސުރުޚީ (ދިވެހި)' : 'Heading (Thaana)',
        valid: !!articleState.heading.trim(),
        errorMessage: editorState.language === 'dv' ? 'ދިވެހި ސުރުޚީ ލިޔުއްވާ' : 'Please enter a heading'
      },
      {
        name: editorState.language === 'dv' ? 'ކެޓަގަރީ' : 'Category',
        valid: !!articleState.category,
        errorMessage: editorState.language === 'dv' ? 'ކެޓަގަރީއެއް އިޚްތިޔާރުކުރައްވާ' : 'Please select a category'
      }
    ];

    setEditorState(prev => ({ ...prev, validationFields: validations }));
    return validations.every(v => v.valid);
  };

  // Add typed handlers for save and publish
  const handleSaveDraft = async (stayOnPage: boolean = false) => {
    if (!editor) return;
    
    updateEditorState({ formTouched: true });
    
    if (!validateForm()) return;
    
    try {
      updateEditorState({
        ...editorState,
        saving: true,
        error: null
      });
      
      if (!user) {
        navigate('/login', { replace: true });
        return;
      }

      await createArticle({
        ...articleState,
        content: convertToRecord(editor.getJSON()),
        status: 'draft',
        publish_date: null,
        user_id: user.id
      });

      updateEditorState({
        ...editorState,
        lastSaved: new Date(),
        hasUnsavedChanges: false,
        saving: false
      });
      
      if (!stayOnPage) {
        navigate('/articles');
      }
    } catch (error) {
      console.error('Failed to save draft:', error);
      updateEditorState({
        ...editorState,
        error: editorState.language === 'dv' 
          ? 'ޑްރާފްޓް ކުރުމުގައި މަްސަލައެއް ދިމާވެއްޖެ' 
          : 'Failed to save draft. Please try again.',
        saving: false
      });
    }
  };

  const handlePublish = async () => {
    if (!editor) return;
    
    updateEditorState({ formTouched: true });
    
    if (!validateForm()) return;
    
    try {
      updateEditorState({
        ...editorState,
        publishing: true,
        error: null
      });
      
      if (!user) {
        navigate('/login', { replace: true });
        return;
      }

      await createArticle({
        ...articleState,
        content: convertToRecord(editor.getJSON()),
        status: 'published',
        publish_date: new Date().toISOString(),
        user_id: user.id
      });
      
      updateEditorState({
        ...editorState,
        hasUnsavedChanges: false,
        publishing: false
      });
      
      navigate('/articles');
    } catch (error) {
      console.error('Failed to publish:', error);
      updateEditorState({
        ...editorState,
        error: editorState.language === 'dv' 
          ? 'ޝާއިޢު ކުރުމުގައި މަްސަލައެއް ދިމާވެއްޖެ' 
          : 'Failed to publish. Please try again.',
        publishing: false
      });
    }
  };

  // Handle news type change
  const handleNewsTypeChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {
    const value = e.target.value;
    if (isValidNewsType(value)) {
      updateArticleState({ newsType: value });
    }
  }, [updateArticleState]);

  // Handle priority change
  const handlePriorityChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {
    const value = parseInt(e.target.value);
    if (isValidPriority(value)) {
      updateArticleState({ newsPriority: value });
    }
  }, [updateArticleState]);

  // Handle language toggle
  const toggleLanguage = useCallback(() => {
    updateEditorState(prev => ({
      ...prev,
      language: prev.language === 'dv' ? 'en' : 'dv'
    }));
  }, []);

  // Clear island selections when atoll selection changes
  useEffect(() => {
    setArticleState(prev => ({ ...prev, subcategory: null }));
  }, [articleState.category]);

  // Editor functions
  const handleAddImage = () => {
    setEditorState(prev => ({ ...prev, showImageBrowser: true }));
  };

  const handleImageSelect = useCallback((url: string) => {
    if (editor) {
      editor.chain().focus().setImage({ src: url }).run();
    }
    setEditorState(prev => ({ ...prev, showImageBrowser: false }));
  }, [editor]);

  const handleAddLink = () => {
    const url = window.prompt('Enter URL');
    if (url && editor) {
      editor.chain().focus().setLink({ href: url }).run();
    }
  };

  // Article data preparation
  const prepareArticleData = (): NewArticleState | null => {
    if (!editor || !user) return null;

    return {
      title: articleState.title,
      heading: articleState.heading,
      social_heading: articleState.socialHeading,
      content: editor.getJSON() as Record<string, unknown>,
      category_id: parseInt(articleState.category),
      subcategory_id: articleState.subcategory ? parseInt(articleState.subcategory) : null,
      cover_image: articleState.coverImage,
      image_caption: articleState.imageCaption,
      user_id: user.id,
      status: 'draft',
      publish_date: null,
      is_breaking: articleState.isBreaking,
      is_featured: articleState.isFeatured,
      is_developing: articleState.isDeveloping,
      is_exclusive: articleState.isExclusive,
      is_sponsored: articleState.isSponsored,
      sponsored_by: articleState.isSponsored ? articleState.sponsoredBy : null,
      sponsored_url: articleState.isSponsored ? articleState.sponsoredUrl : null,
      news_type: articleState.newsType,
      news_priority: articleState.newsPriority,
      news_source: articleState.newsSource,
      meta_title: articleState.metaTitle,
      meta_description: articleState.metaDescription,
      meta_keywords: articleState.metaKeywords,
      tags: articleState.tags,
      author_notes: articleState.authorNotes,
      original_source_url: articleState.originalSourceUrl,
      translation_source_url: articleState.translationSourceUrl,
      translation_source_lang: articleState.translationSourceLang,
      translation_notes: articleState.translationNotes
    };
  };

  // Validation
  const validateForm = (): boolean => {
    setEditorState(prev => ({ ...prev, formTouched: true }));
    
    const validations: ValidationField[] = [
      {
        name: editorState.language === 'dv' ? 'ސުރުޚީ (ލެޓިން)' : 'Title (Latin)',
        valid: !!articleState.title.trim(),
        errorMessage: editorState.language === 'dv' ? 'ސުރުޚީ ލިޔުއްވާ' : 'Please enter a title'
      },
      {
        name: editorState.language === 'dv' ? 'ސުރުޚީ (ދިވެހި)' : 'Heading (Thaana)',
        valid: !!articleState.heading.trim(),
        errorMessage: editorState.language === 'dv' ? 'ދިވެހި ސުރުޚީ ލިޔުއްވާ' : 'Please enter a heading'
      },
      {
        name: editorState.language === 'dv' ? 'ކެޓަގަރީ' : 'Category',
        valid: !!articleState.category,
        errorMessage: editorState.language === 'dv' ? 'ކެޓަގަރީއެއް އިޚްތިޔާރުކުރައްވާ' : 'Please select a category'
      }
    ];

    setEditorState(prev => ({ ...prev, validationFields: validations }));
    return validations.every(v => v.valid);
  };

  // Add typed handlers for save and publish
  const handleSaveDraft = async (stayOnPage: boolean = false) => {
    if (!editor) return;
    
    updateEditorState({ formTouched: true });
    
    if (!validateForm()) return;
    
    try {
      updateEditorState({
        ...editorState,
        saving: true,
        error: null
      });
      
      if (!user) {
        navigate('/login', { replace: true });
        return;
      }

      await createArticle({
        ...articleState,
        content: convertToRecord(editor.getJSON()),
        status: 'draft',
        publish_date: null,
        user_id: user.id
      });

      updateEditorState({
        ...editorState,
        lastSaved: new Date(),
        hasUnsavedChanges: false,
        saving: false
      });
      
      if (!stayOnPage) {
        navigate('/articles');
      }
    } catch (error) {
      console.error('Failed to save draft:', error);
      updateEditorState({
        ...editorState,
        error: editorState.language === 'dv' 
          ? 'ޑްރާފްޓް ކުރުމުގައި މަްސަލައެއް ދިމާވެއްޖެ' 
          : 'Failed to save draft. Please try again.',
        saving: false
      });
    }
  };

  const handlePublish = async () => {
    if (!editor) return;
    
    updateEditorState({ formTouched: true });
    
    if (!validateForm()) return;
    
    try {
      updateEditorState({
        ...editorState,
        publishing: true,
        error: null
      });
      
      if (!user) {
        navigate('/login', { replace: true });
        return;
      }

      await createArticle({
        ...articleState,
        content: convertToRecord(editor.getJSON()),
        status: 'published',
        publish_date: new Date().toISOString(),
        user_id: user.id
      });
      
      updateEditorState({
        ...editorState,
        hasUnsavedChanges: false,
        publishing: false
      });
      
      navigate('/articles');
    } catch (error) {
      console.error('Failed to publish:', error);
      updateEditorState({
        ...editorState,
        error: editorState.language === 'dv' 
          ? 'ޝާއިޢު ކުރުމުގައި މަްސަލައެއް ދިމާވެއްޖެ' 
          : 'Failed to publish. Please try again.',
        publishing: false
      });
    }
  };

  // Handle news type change
  const handleNewsTypeChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {
    const value = e.target.value;
    if (isValidNewsType(value)) {
      updateArticleState({ newsType: value });
    }
  }, [updateArticleState]);

  // Handle priority change
  const handlePriorityChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {
    const value = parseInt(e.target.value);
    if (isValidPriority(value)) {
      updateArticleState({ newsPriority: value });
    }
  }, [updateArticleState]);

  // Handle language toggle
  const toggleLanguage = useCallback(() => {
    updateEditorState(prev => ({
      ...prev,
      language: prev.language === 'dv' ? 'en' : 'dv'
    }));
  }, []);

  // Clear island selections when atoll selection changes
  useEffect(() => {
    setArticleState(prev => ({ ...prev, subcategory: null }));
  }, [articleState.category]);

  // Editor functions
  const handleAddImage = () => {
    setEditorState(prev => ({ ...prev, showImageBrowser: true }));
  };

  const handleImageSelect = useCallback((url: string) => {
    if (editor) {
      editor.chain().focus().setImage({ src: url }).run();
    }
    setEditorState(prev => ({ ...prev, showImageBrowser: false }));
  }, [editor]);

  const handleAddLink = () => {
    const url = window.prompt('Enter URL');
    if (url && editor) {
      editor.chain().focus().setLink({ href: url }).run();
    }
  };

  // Article data preparation
  const prepareArticleData = (): NewArticleState | null => {
    if (!editor || !user) return null;

    return {
      title: articleState.title,
      heading: articleState.heading,
      social_heading: articleState.socialHeading,
      content: editor.getJSON() as Record<string, unknown>,
      category_id: parseInt(articleState.category),
      subcategory_id: articleState.subcategory ? parseInt(articleState.subcategory) : null,
      cover_image: articleState.coverImage,
      image_caption: articleState.imageCaption,
      user_id: user.id,
      status: 'draft',
      publish_date: null,
      is_breaking: articleState.isBreaking,
      is_featured: articleState.isFeatured,
      is_developing: articleState.isDeveloping,
      is_exclusive: articleState.isExclusive,
      is_sponsored: articleState.isSponsored,
      sponsored_by: articleState.isSponsored ? articleState.sponsoredBy : null,
      sponsored_url: articleState.isSponsored ? articleState.sponsoredUrl : null,
      news_type: articleState.newsType,
      news_priority: articleState.newsPriority,
      news_source: articleState.newsSource,
      meta_title: articleState.metaTitle,
      meta_description: articleState.metaDescription,
      meta_keywords: articleState.metaKeywords,
      tags: articleState.tags,
      author_notes: articleState.authorNotes,
      original_source_url: articleState.originalSourceUrl,
      translation_source_url: articleState.translationSourceUrl,
      translation_source_lang: articleState.translationSourceLang,
      translation_notes: articleState.translationNotes
    };
  };

  // Validation
  const validateForm = (): boolean => {
    setEditorState(prev => ({ ...prev, formTouched: true }));
    
    const validations: ValidationField[] = [
      {
        name: editorState.language === 'dv' ? 'ސުރުޚީ (ލެޓިން)' : 'Title (Latin)',
        valid: !!articleState.title.trim(),
        errorMessage: editorState.language === 'dv' ? 'ސުރުޚީ ލިޔުއްވާ' : 'Please enter a title'
      },
      {
        name: editorState.language === 'dv' ? 'ސުރުޚީ (ދިވެހި)' : 'Heading (Thaana)',
        valid: !!articleState.heading.trim(),
        errorMessage: editorState.language === 'dv' ? 'ދިވެހި ސުރުޚީ ލިޔުއްވާ' : 'Please enter a heading'
      },
      {
        name: editorState.language === 'dv' ? 'ކެޓަގަރީ' : 'Category',
        valid: !!articleState.category,
        errorMessage: editorState.language === 'dv' ? 'ކެޓަގަރީއެއް އިޚްތިޔާރުކުރައްވާ' : 'Please select a category'
      }
    ];

    setEditorState(prev => ({ ...prev, validationFields: validations }));
    return validations.every(v => v.valid);
  };

  // Add typed handlers for save and publish
  const handleSaveDraft = async (stayOnPage: boolean = false) => {
    if (!editor) return;
    
    updateEditorState({ formTouched: true });
    
    if (!validateForm()) return;
    
    try {
      updateEditorState({
        ...editorState,
        saving: true,
        error: null
      });
      
      if (!user) {
        navigate('/login', { replace: true });
        return;
      }

      await createArticle({
        ...articleState,
        content: convertToRecord(editor.getJSON()),
        status: 'draft',
        publish_date: null,
        user_id: user.id
      });

      updateEditorState({
        ...editorState,
        lastSaved: new Date(),
        hasUnsavedChanges: false,
        saving: false
      });
      
      if (!stayOnPage) {
        navigate('/articles');
      }
    } catch (error) {
      console.error('Failed to save draft:', error);
      updateEditorState({
        ...editorState,
        error: editorState.language === 'dv' 
          ? 'ޑްރާފްޓް ކުރުމުގައި މަްސަލައެއް ދިމާވެއްޖެ' 
          : 'Failed to save draft. Please try again.',
        saving: false
      });
    }
  };

  const handlePublish = async () => {
    if (!editor) return;
    
    updateEditorState({ formTouched: true });
    
    if (!validateForm()) return;
    
    try {
      updateEditorState({
        ...editorState,
        publishing: true,
        error: null
      });
      
      if (!user) {
        navigate('/login', { replace: true });
        return;
      }

      await createArticle({
        ...articleState,
        content: convertToRecord(editor.getJSON()),
        status: 'published',
        publish_date: new Date().toISOString(),
        user_id: user.id
      });
      
      updateEditorState({
        ...editorState,
        hasUnsavedChanges: false,
        publishing: false
      });
      
      navigate('/articles');
    } catch (error) {
      console.error('Failed to publish:', error);
      updateEditorState({
        ...editorState,
        error: editorState.language === 'dv' 
          ? 'ޝާއިޢު ކުރުމުގައި މަްސަލައެއް ދިމާވެއްޖެ' 
          : 'Failed to publish. Please try again.',
        publishing: false
      });
    }
  };

  // Handle news type change
  const handleNewsTypeChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {
    const value = e.target.value;
    if (isValidNewsType(value)) {
      updateArticleState({ newsType: value });
    }
  }, [updateArticleState]);

  // Handle priority change
  const handlePriorityChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {
    const value = parseInt(e.target.value);
    if (isValidPriority(value)) {
      updateArticleState({ newsPriority: value });
    }
  }, [updateArticleState]);

  // Handle language toggle
  const toggleLanguage = useCallback(() => {
    updateEditorState(prev => ({
      ...prev,
      language: prev.language === 'dv' ? 'en' : 'dv'
    }));
  }, []);

  // Clear island selections when atoll selection changes
  useEffect(() => {
    setArticleState(prev => ({ ...prev, subcategory: null }));
  }, [articleState.category]);

  // Editor functions
  const handleAddImage = () => {
    setEditorState(prev => ({ ...prev, showImageBrowser: true }));
  };

  const handleImageSelect = useCallback((url: string) => {
    if (editor) {
      editor.chain().focus().setImage({ src: url }).run();
    }
    setEditorState(prev => ({ ...prev, showImageBrowser: false }));
  }, [editor]);

  const handleAddLink = () => {
    const url = window.prompt('Enter URL');
    if (url && editor) {
      editor.chain().focus().setLink({ href: url }).run();
    }
  };

  // Article data preparation
  const prepareArticleData = (): NewArticleState | null => {
    if (!editor || !user) return null;

    return {
      title: articleState.title,
      heading: articleState.heading,
      social_heading: articleState.socialHeading,
      content: editor.getJSON() as Record<string, unknown>,
      category_id: parseInt(articleState.category),
      subcategory_id: articleState.subcategory ? parseInt(articleState.subcategory) : null,
      cover_image: articleState.coverImage,
      image_caption: articleState.imageCaption,
      user_id: user.id,
      status: 'draft',
      publish_date: null,
      is_breaking: articleState.isBreaking,
      is_featured: articleState.isFeatured,
      is_developing: articleState.isDeveloping,
      is_exclusive: articleState.isExclusive,
      is_sponsored: articleState.isSponsored,
      sponsored_by: articleState.isSponsored ? articleState.sponsoredBy : null,
      sponsored_url: articleState.isSponsored ? articleState.sponsoredUrl : null,
      news_type: articleState.newsType,
      news_priority: articleState.newsPriority,
      news_source: articleState.newsSource,
      meta_title: articleState.metaTitle,
      meta_description: articleState.metaDescription,
      meta_keywords: articleState.metaKeywords,
      tags: articleState.tags,
      author_notes: articleState.authorNotes,
      original_source_url: articleState.originalSourceUrl,
      translation_source_url: articleState.translationSourceUrl,
      translation_source_lang: articleState.translationSourceLang,
      translation_notes: articleState.translationNotes
    };
  };

  // Validation
  const validateForm = (): boolean => {
    setEditorState(prev => ({ ...prev, formTouched: true }));
    
    const validations: ValidationField[] = [
      {
        name: editorState.language === 'dv' ? 'ސުރުޚީ (ލެޓިން)' : 'Title (Latin)',
        valid: !!articleState.title.trim(),
        errorMessage: editorState.language === 'dv' ? 'ސުރުޚީ ލިޔުއްވާ' : 'Please enter a title'
      },
      {
        name: editorState.language === 'dv' ? 'ސުރުޚީ (ދިވެހި)' : 'Heading (Thaana)',
        valid: !!articleState.heading.trim(),
        errorMessage: editorState.language === 'dv' ? 'ދިވެހި ސުރުޚީ ލިޔުއްވާ' : 'Please enter a heading'
      },
      {
        name: editorState.language === 'dv' ? 'ކެޓަގަރީ' : 'Category',
        valid: !!articleState.category,
        errorMessage: editorState.language === 'dv' ? 'ކެޓަގަރީއެއް އިޚްތިޔާރުކުރައްވާ' : 'Please select a category'
      }
    ];

    setEditorState(prev => ({ ...prev, validationFields: validations }));
    return validations.every(v => v.valid);
  };

  // Add typed handlers for save and publish
  const handleSaveDraft = async (stayOnPage: boolean = false) => {
    if (!editor) return;
    
    updateEditorState({ formTouched: true });
    
    if (!validateForm()) return;
    
    try {
      updateEditorState({
        ...editorState,
        saving: true,
        error: null
      });
      
      if (!user) {
        navigate('/login', { replace: true });
        return;
      }

      await createArticle({
        ...articleState,
        content: convertToRecord(editor.getJSON()),
        status: 'draft',
        publish_date: null,
        user_id: user.id
      });

      updateEditorState({
        ...editorState,
        lastSaved: new Date(),
        hasUnsavedChanges: false,
        saving: false
      });
      
      if (!stayOnPage) {
        navigate('/articles');
      }
    } catch (error) {
      console.error('Failed to save draft:', error);
      updateEditorState({
        ...editorState,
        error: editorState.language === 'dv' 
          ? 'ޑްރާފްޓް ކުރުމުގައި މަްސަލައެއް ދިމާވެއްޖެ' 
          : 'Failed to save draft. Please try again.',
        saving: false
      });
    }
  };

  const handlePublish = async () => {
    if (!editor) return;
    
    updateEditorState({ formTouched: true });
    
    if (!validateForm()) return;
    
    try {
      updateEditorState({
        ...editorState,
        publishing: true,
        error: null
      });
      
      if (!user) {
        navigate('/login', { replace: true });
        return;
      }

      await createArticle({
        ...articleState,
        content: convertToRecord(editor.getJSON()),
        status: 'published',
        publish_date: new Date().toISOString(),
        user_id: user.id
      });
      
      updateEditorState({
        ...editorState,
        hasUnsavedChanges: false,
        publishing: false
      });
      
      navigate('/articles');
    } catch (error) {
      console.error('Failed to publish:', error);
      updateEditorState({
        ...editorState,
        error: editorState.language === 'dv' 
          ? 'ޝާއިޢު ކުރުމުގައި މަްސަލައެއް ދިމާވެއްޖެ' 
          : 'Failed to publish. Please try again.',
        publishing: false
      });
    }
  };

  // Handle news type change
  const handleNewsTypeChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {
    const value = e.target.value;
    if (isValidNewsType(value)) {
      updateArticleState({ newsType: value });
    }
  }, [updateArticleState]);

  // Handle priority change
  const handlePriorityChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {
    const value = parseInt(e.target.value);
    if (isValidPriority(value)) {
      updateArticleState({ newsPriority: value });
    }
  }, [updateArticleState]);

  // Handle language toggle
  const toggleLanguage = useCallback(() => {
    updateEditorState(prev => ({
      ...prev,
      language: prev.language === 'dv' ? 'en' : 'dv'
    }));
  }, []);

  // Clear island selections when atoll selection changes
  useEffect(() => {
    setArticleState(prev => ({ ...prev, subcategory: null }));
  }, [articleState.category]);

  // Editor functions
  const handleAddImage = () => {
    setEditorState(prev => ({ ...prev, showImageBrowser: true }));
  };

  const handleImageSelect = useCallback((url: string) => {
    if (editor) {
      editor.chain().focus().setImage({ src: url }).run();
    }
    setEditorState(prev => ({ ...prev, showImageBrowser: false }));
  }, [editor]);

  const handleAddLink = () => {
    const url = window.prompt('Enter URL');
    if (url && editor) {
      editor.chain().focus().setLink({ href: url }).run();
    }
  };

  // Article data preparation
  const prepareArticleData = (): NewArticleState | null => {
    if (!editor || !user) return null;

    return {
      title: articleState.title,
      heading: articleState.heading,
      social_heading: articleState.socialHeading,
      content: editor.getJSON() as Record<string, unknown>,
      category_id: parseInt(articleState.category),
      subcategory_id: articleState.subcategory ? parseInt(articleState.subcategory) : null,
      cover_image: articleState.coverImage,
      image_caption: articleState.imageCaption,
      user_id: user.id,
      status: 'draft',
      publish_date: null,
      is_breaking: articleState.isBreaking,
      is_featured: articleState.isFeatured,
      is_developing: articleState.isDeveloping,
      is_exclusive: articleState.isExclusive,
      is_sponsored: articleState.isSponsored,
      sponsored_by: articleState.isSponsored ? articleState.sponsoredBy : null,
      sponsored_url: articleState.isSponsored ? articleState.sponsoredUrl : null,
      news_type: articleState.newsType,
      news_priority: articleState.newsPriority,
      news_source: articleState.newsSource,
      meta_title: articleState.metaTitle,
      meta_description: articleState.metaDescription,
      meta_keywords: articleState.metaKeywords,
      tags: articleState.tags,
      author_notes: articleState.authorNotes,
      original_source_url: articleState.originalSourceUrl,
      translation_source_url: articleState.translationSourceUrl,
      translation_source_lang: articleState.translationSourceLang,
      translation_notes: articleState.translationNotes
    };
  };

  // Validation
  const validateForm = (): boolean => {
    setEditorState(prev => ({ ...prev, formTouched: true }));
    
    const validations: ValidationField[] = [
      {
        name: editorState.language === 'dv' ? 'ސުރުޚީ (ލެޓިން)' : 'Title (Latin)',
        valid: !!articleState.title.trim(),
        errorMessage: editorState.language === 'dv' ? 'ސުރުޚީ ލިޔުއްވާ' : 'Please enter a title'
      },
      {
        name: editorState.language === 'dv' ? 'ސުރުޚީ (ދިވެހި)' : 'Heading (Thaana)',
        valid: !!articleState.heading.trim(),
        errorMessage: editorState.language === 'dv' ? 'ދިވެހި ސުރުޚީ ލިޔުއްވާ' : 'Please enter a heading'
      },
      {
        name: editorState.language === 'dv' ? 'ކެޓަގަރީ' : 'Category',
        valid: !!articleState.category,
        errorMessage: editorState.language === 'dv' ? 'ކެޓަގަރީއެއް އިޚްތިޔާރުކުރައްވާ' : 'Please select a category'
      }
    ];

    setEditorState(prev => ({ ...prev, validationFields: validations }));
    return validations.every(v => v.valid);
  };

  // Add typed handlers for save and publish
  const handleSaveDraft = async (stayOnPage: boolean = false) => {
    if (!editor) return;
    
    updateEditorState({ formTouched: true });
    
    if (!validateForm()) return;
    
    try {
      updateEditorState({
        ...editorState,
        saving: true,
        error: null
      });
      
      if (!user) {
        navigate('/login', { replace: true });
        return;
      }

      await createArticle({
        ...articleState,
        content: convertToRecord(editor.getJSON()),
        status: 'draft',
        publish_date: null,
        user_id: user.id
      });

      updateEditorState({
        ...editorState,
        lastSaved: new Date(),
        hasUnsavedChanges: false,
        saving: false
      });
      
      if (!stayOnPage) {
        navigate('/articles');
      }
    } catch (error) {
      console.error('Failed to save draft:', error);
      updateEditorState({
        ...editorState,
        error: editorState.language === 'dv' 
          ? 'ޑްރާފްޓް ކުރުމުގައި މަްސަލައެއް ދިމާވެއްޖެ' 
          : 'Failed to save draft. Please try again.',
        saving: false
      });
    }
  };

  const handlePublish = async () => {
    if (!editor) return;
    
    updateEditorState({ formTouched: true });
    
    if (!validateForm()) return;
    
    try {
      updateEditorState({
        ...editorState,
        publishing: true,
        error: null
      });
      
      if (!user) {
        navigate('/login', { replace: true });
        return;
      }

      await createArticle({
        ...articleState,
        content: convertToRecord(editor.getJSON()),
        status: 'published',
        publish_date: new Date().toISOString(),
        user_id: user.id
      });
      
      updateEditorState({
        ...editorState,
        hasUnsavedChanges: false,
        publishing: false
      });
      
      navigate('/articles');
    } catch (error) {
      console.error('Failed to publish:', error);
      updateEditorState({
        ...editorState,
        error: editorState.language === 'dv' 
          ? 'ޝާއިޢު ކުރުމުގައި މަްސަލައެއް ދިމާވެއްޖެ' 
          : 'Failed to publish. Please try again.',
        publishing: false
      });
    }
  };

  // Handle news type change
  const handleNewsTypeChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {
    const value = e.target.value;
    if (isValidNewsType(value)) {
      updateArticleState({ newsType: value });
    }
  }, [updateArticleState]);

  // Handle priority change
  const handlePriorityChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {
    const value = parseInt(e.target.value);
    if (isValidPriority(value)) {
      updateArticleState({ newsPriority: value });
    }
  }, [updateArticleState]);

  // Handle language toggle
  const toggleLanguage = useCallback(() => {
    updateEditorState(prev => ({
      ...prev,
      language: prev.language === 'dv' ? 'en' : 'dv'
    }));
  }, []);

  // Clear island selections when atoll selection changes
  useEffect(() => {
    setArticleState(prev => ({ ...prev, subcategory: null }));
  }, [articleState.category]);

  // Editor functions
  const handleAddImage = () => {
    setEditorState(prev => ({ ...prev, showImageBrowser: true }));
  };

  const handleImageSelect = useCallback((url: string) => {
    if (editor) {
      editor.chain