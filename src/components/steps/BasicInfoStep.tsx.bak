import React from 'react';
import { EditorContent, Editor } from '@tiptap/react';
import { CollaborativeInput } from '../CollaborativeInput';
import { ColoredMultiSelect } from '../ColoredMultiSelect';
import { ValidationField } from '../../types/editor';

interface BasicInfoStepProps {
  // Basic article fields
  title: string;
  setTitle: (value: string) => void;
  heading: string;
  setHeading: (value: string) => void;
  socialHeading: string;
  setSocialHeading: (value: string) => void;
  
  // Categories
  category: string[];
  setCategory: (value: string[]) => void;
  subcategory: string[];
  setSubcategory: (value: string[]) => void;
    // Editor and image
  editor: Editor;
  coverImage: string;
  setCoverImage: (value: string) => void;
  imageCaption: string;
  setImageCaption: (value: string) => void;
  showImageBrowser: boolean;
  setShowImageBrowser: (value: boolean) => void;
  
  // Data sources
  categories: {
    id: number;
    name: string;
    name_en?: string;
  }[];
  subcategories: {
    id: number;
    name: string;
    name_en?: string;
    category_id: number;
  }[];
  
  // Collaborative editing
  collaborative: {
    enabled: boolean;
    [key: string]: unknown;
  };
  currentUser: string;
  language: 'en' | 'dv';
}

export const BasicInfoStep: React.FC<BasicInfoStepProps> = ({
  title,
  setTitle,
  heading,
  setHeading,
  socialHeading,
  setSocialHeading,
  category,
  setCategory,
  subcategory,
  setSubcategory,
  editor,
  coverImage,
  setCoverImage,
  imageCaption,
  setImageCaption,
  showImageBrowser,
  setShowImageBrowser,
  categories,
  subcategories,
  collaborative,
  currentUser,
  language
}) => {
  const categoryOptions = categories.map(cat => ({
    value: cat.id.toString(),
    label: language === 'dv' ? cat.name : cat.name_en || cat.name,
    color: `hsl(${cat.id * 137.508}, 70%, 50%)`
  }));

  const subcategoryOptions = subcategories
    .filter(sub => category.includes(sub.category_id.toString()))
    .map(sub => ({
      value: sub.id.toString(),
      label: language === 'dv' ? sub.name : sub.name_en || sub.name,
      color: `hsl(${sub.id * 137.508}, 50%, 60%)`
    }));

  return (
    <div className="space-y-6">
      {/* Title */}
      <div>
        <label className={`block text-sm font-medium text-gray-700 mb-2 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
          {language === 'dv' ? 'ސުރުޚީ' : 'Title'} *
        </label>
        <CollaborativeInput
          fieldId="title"
          value={title}
          onChange={setTitle}
          collaborative={collaborative}
          currentUser={currentUser}
          placeholder={language === 'dv' ? 'މަޝްހޫރުގެ ސުރުޚީ ލިޔެފާ' : 'Enter article title'}
          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          dir={language === 'dv' ? 'rtl' : 'ltr'}
        />
      </div>

      {/* Heading */}
      <div>
        <label className={`block text-sm font-medium text-gray-700 mb-2 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
          {language === 'dv' ? 'ސުރުޚި' : 'Heading'} *
        </label>
        <CollaborativeInput
          fieldId="heading"
          value={heading}
          onChange={setHeading}
          collaborative={collaborative}
          currentUser={currentUser}
          placeholder={language === 'dv' ? 'މަޝްހޫރުގެ ސުރުޚި ލިޔެފާ' : 'Enter article heading'}
          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          dir={language === 'dv' ? 'rtl' : 'ltr'}
        />
      </div>

      {/* Social Heading */}
      <div>
        <label className={`block text-sm font-medium text-gray-700 mb-2 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
          {language === 'dv' ? 'ސޯޝަލް މީޑިއާ ސުރުޚި' : 'Social Media Heading'}
        </label>
        <CollaborativeInput
          fieldId="socialHeading"
          value={socialHeading}
          onChange={setSocialHeading}
          collaborative={collaborative}
          currentUser={currentUser}
          placeholder={language === 'dv' ? 'ސޯޝަލް މީޑިއާއަށް ބޭނުންވާ ސުރުޚި' : 'Heading for social media sharing'}
          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          dir={language === 'dv' ? 'rtl' : 'ltr'}
        />
      </div>

      {/* Categories */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className={`block text-sm font-medium text-gray-700 mb-2 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
            {language === 'dv' ? 'ބައި' : 'Category'} *
          </label>
          <ColoredMultiSelect
            options={categoryOptions}
            value={category}
            onChange={setCategory}
            placeholder={language === 'dv' ? 'ބައި ހޮއްވަވާ' : 'Select categories'}
            language={language}
          />
        </div>

        <div>
          <label className={`block text-sm font-medium text-gray-700 mb-2 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
            {language === 'dv' ? 'ކުޑިބައި' : 'Subcategory'}
          </label>
          <ColoredMultiSelect
            options={subcategoryOptions}
            value={subcategory}
            onChange={setSubcategory}
            placeholder={language === 'dv' ? 'ކުޑިބައި ހޮއްވަވާ' : 'Select subcategories'}
            language={language}
            disabled={category.length === 0}
          />
        </div>
      </div>

      {/* Cover Image */}
      <div>
        <label className={`block text-sm font-medium text-gray-700 mb-2 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
          {language === 'dv' ? 'ކަވަރ އިމޭޖް' : 'Cover Image'}
        </label>
        <div className="flex items-center space-x-3">
          <CollaborativeInput
            fieldId="coverImage"
            value={coverImage}
            onChange={setCoverImage}
            collaborative={collaborative}
            currentUser={currentUser}
            placeholder={language === 'dv' ? 'އިމޭޖް URL ލިޔެފާ' : 'Enter image URL'}
            className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
          <button
            onClick={() => setShowImageBrowser(!showImageBrowser)}
            className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
          </button>
        </div>
        
        {coverImage && (
          <div className="mt-3">
            <img 
              src={coverImage} 
              alt="Cover preview" 
              className="max-w-xs rounded-md shadow-sm"
              onError={(e) => {
                e.currentTarget.style.display = 'none';
              }}
            />
          </div>
        )}
      </div>

      {/* Image Caption */}
      {coverImage && (
        <div>
          <label className={`block text-sm font-medium text-gray-700 mb-2 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
            {language === 'dv' ? 'އިމޭޖް ކެޕްޝަން' : 'Image Caption'}
          </label>
          <CollaborativeInput
            fieldId="imageCaption"
            value={imageCaption}
            onChange={setImageCaption}
            collaborative={collaborative}
            currentUser={currentUser}
            placeholder={language === 'dv' ? 'އިމޭޖް ކެޕްޝަން ލިޔެފާ' : 'Enter image caption'}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            dir={language === 'dv' ? 'rtl' : 'ltr'}
          />
        </div>
      )}

      {/* Content Editor */}
      <div>
        <label className={`block text-sm font-medium text-gray-700 mb-2 ${language === 'dv' ? 'thaana-waheed' : ''}`}>
          {language === 'dv' ? 'ލިޔުން' : 'Content'} *
        </label>
        <div className="border border-gray-300 rounded-md">
          <EditorContent 
            editor={editor} 
            className="prose prose-lg max-w-none min-h-[300px] p-4 focus:outline-none"
          />
        </div>
      </div>
    </div>
  );
};

// Validation function for basic info step
export const validateBasicInfo = (data: any): ValidationField[] => {
  const validationFields: ValidationField[] = [];

  // Title validation
  validationFields.push({
    name: 'Title',
    valid: data.title && data.title.trim() !== '',
    errorMessage: data.language === 'dv' ? 'ސުރުޚީ ލާޒިމް' : 'Title is required'
  });

  // Heading validation
  validationFields.push({
    name: 'Heading',
    valid: data.heading && data.heading.trim() !== '',
    errorMessage: data.language === 'dv' ? 'ސުރުޚި ލާޒިމް' : 'Heading is required'
  });

  // Category validation
  validationFields.push({
    name: 'Category',
    valid: data.category && data.category.length > 0,
    errorMessage: data.language === 'dv' ? 'ބައެއް ހޮއްވަވާ' : 'At least one category is required'
  });

  // Content validation
  const hasContent = data.editor && data.editor.getHTML() !== '<p></p>' && data.editor.getText().trim() !== '';
  validationFields.push({
    name: 'Content',
    valid: hasContent,
    errorMessage: data.language === 'dv' ? 'ލިޔުން ލާޒިމް' : 'Content is required'
  });

  return validationFields;
};

export default BasicInfoStep;
